// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestDataClient is the client API for TestData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestDataClient interface {
	ListTestJobs(ctx context.Context, in *ListTestJobsRequest, opts ...grpc.CallOption) (TestData_ListTestJobsClient, error)
	ListTestJobRuns(ctx context.Context, in *ListTestJobRunsRequest, opts ...grpc.CallOption) (TestData_ListTestJobRunsClient, error)
	GetTestJobRunResults(ctx context.Context, in *GetTestJobRunResultsRequest, opts ...grpc.CallOption) (*TestJobRunResults, error)
}

type testDataClient struct {
	cc grpc.ClientConnInterface
}

func NewTestDataClient(cc grpc.ClientConnInterface) TestDataClient {
	return &testDataClient{cc}
}

func (c *testDataClient) ListTestJobs(ctx context.Context, in *ListTestJobsRequest, opts ...grpc.CallOption) (TestData_ListTestJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestData_ServiceDesc.Streams[0], "/TestData/ListTestJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &testDataListTestJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestData_ListTestJobsClient interface {
	Recv() (*TestJob, error)
	grpc.ClientStream
}

type testDataListTestJobsClient struct {
	grpc.ClientStream
}

func (x *testDataListTestJobsClient) Recv() (*TestJob, error) {
	m := new(TestJob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testDataClient) ListTestJobRuns(ctx context.Context, in *ListTestJobRunsRequest, opts ...grpc.CallOption) (TestData_ListTestJobRunsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestData_ServiceDesc.Streams[1], "/TestData/ListTestJobRuns", opts...)
	if err != nil {
		return nil, err
	}
	x := &testDataListTestJobRunsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestData_ListTestJobRunsClient interface {
	Recv() (*TestJobRun, error)
	grpc.ClientStream
}

type testDataListTestJobRunsClient struct {
	grpc.ClientStream
}

func (x *testDataListTestJobRunsClient) Recv() (*TestJobRun, error) {
	m := new(TestJobRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testDataClient) GetTestJobRunResults(ctx context.Context, in *GetTestJobRunResultsRequest, opts ...grpc.CallOption) (*TestJobRunResults, error) {
	out := new(TestJobRunResults)
	err := c.cc.Invoke(ctx, "/TestData/GetTestJobRunResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestDataServer is the server API for TestData service.
// All implementations must embed UnimplementedTestDataServer
// for forward compatibility
type TestDataServer interface {
	ListTestJobs(*ListTestJobsRequest, TestData_ListTestJobsServer) error
	ListTestJobRuns(*ListTestJobRunsRequest, TestData_ListTestJobRunsServer) error
	GetTestJobRunResults(context.Context, *GetTestJobRunResultsRequest) (*TestJobRunResults, error)
	mustEmbedUnimplementedTestDataServer()
}

// UnimplementedTestDataServer must be embedded to have forward compatible implementations.
type UnimplementedTestDataServer struct {
}

func (UnimplementedTestDataServer) ListTestJobs(*ListTestJobsRequest, TestData_ListTestJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTestJobs not implemented")
}
func (UnimplementedTestDataServer) ListTestJobRuns(*ListTestJobRunsRequest, TestData_ListTestJobRunsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTestJobRuns not implemented")
}
func (UnimplementedTestDataServer) GetTestJobRunResults(context.Context, *GetTestJobRunResultsRequest) (*TestJobRunResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestJobRunResults not implemented")
}
func (UnimplementedTestDataServer) mustEmbedUnimplementedTestDataServer() {}

// UnsafeTestDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestDataServer will
// result in compilation errors.
type UnsafeTestDataServer interface {
	mustEmbedUnimplementedTestDataServer()
}

func RegisterTestDataServer(s grpc.ServiceRegistrar, srv TestDataServer) {
	s.RegisterService(&TestData_ServiceDesc, srv)
}

func _TestData_ListTestJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTestJobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestDataServer).ListTestJobs(m, &testDataListTestJobsServer{stream})
}

type TestData_ListTestJobsServer interface {
	Send(*TestJob) error
	grpc.ServerStream
}

type testDataListTestJobsServer struct {
	grpc.ServerStream
}

func (x *testDataListTestJobsServer) Send(m *TestJob) error {
	return x.ServerStream.SendMsg(m)
}

func _TestData_ListTestJobRuns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTestJobRunsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestDataServer).ListTestJobRuns(m, &testDataListTestJobRunsServer{stream})
}

type TestData_ListTestJobRunsServer interface {
	Send(*TestJobRun) error
	grpc.ServerStream
}

type testDataListTestJobRunsServer struct {
	grpc.ServerStream
}

func (x *testDataListTestJobRunsServer) Send(m *TestJobRun) error {
	return x.ServerStream.SendMsg(m)
}

func _TestData_GetTestJobRunResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestJobRunResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestDataServer).GetTestJobRunResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestData/GetTestJobRunResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestDataServer).GetTestJobRunResults(ctx, req.(*GetTestJobRunResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestData_ServiceDesc is the grpc.ServiceDesc for TestData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TestData",
	HandlerType: (*TestDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestJobRunResults",
			Handler:    _TestData_GetTestJobRunResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTestJobs",
			Handler:       _TestData_ListTestJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTestJobRuns",
			Handler:       _TestData_ListTestJobRuns_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/testdata/testdata.proto",
}
