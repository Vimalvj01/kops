Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/3yS0W7bPAyF7/0UvCl601+2i/7BJvRiW7KhAZYuSJ6AsRhXiEymouQsbz/YTZplA3Zl+Bzah/zIJkh2U+Gtb20BgAf9+mU9Xc9n0fcUBwmAGDeBnIUtBqUCoEPGltZJIrY0DahKaiHFTEUjnNAzxVXm5Duy8K64i+mGHwdpv1NPwYLnrRQAPUX1whZq82AmhZNm99aC7vx+zpowhFPMLm9oGeXncbCbkDVRnM5nKwt1VZmPE1OZqqzrwdznFb1m0jR6XQHwIpoYO/rRU4zekYXbT3jQ2wLAd9iShd0HNW0TjZdySPpvP0b1tbmvTXXV+v3YSqA00mPhYydZP+f0csHVtFHy/kQU9KiJOveur0SShXKcQ7JbRum9GwrxoJfhZs/rt9kmD6YydfWbIx16tudXE6TBUJy3NqNNblvP7ROyCxTPewKg3jfJCz9hdBY66iQeDfbow/DdY11VC3/H4mirV/LNWfTDU79Fosf/b+5Gcn+VntWr2n+vYODZjAe5xIFi2WMsg9+UJ9DlpeCPTQAwpYPE3TLk1vMzjufHfjCEF6ivmSI6uhzKCLMqR5x7cQtkvyVNp2BKzRgWmRJp2Z1cLX4BAAD//wEAAP//GWuHvzUDAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "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" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
