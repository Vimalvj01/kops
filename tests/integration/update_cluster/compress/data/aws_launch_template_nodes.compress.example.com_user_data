Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUbWvbMBD+7l9xFEq/dLIdurKZFrYlGy2sXUg+jjIU66KKyDpXL84C+/FDchInGYy9+Iut5950zz3nWlMQYzJLJasMgK/dxw/z8fx+YlWHNkIAaPhCo6hgybXDDKDhhkuce7Jc4lhz59BV4G3ArCbjuTJoZ8F41WAFe0QMRhET16nqlw6tVQIr+JGKdWidIgO3MMoS8LXVQSrjnvrjALAzRWxIyaRta9aVrLbqbO/8Z+4H+EHkX8cy2zftjpL8e5r4UT8dpQLYGr/5TYtwCycpYwTrRmfZSdR/XYFR6xXFEcDJM984j40YS0uhhdteAwCa5GfsUFegzJKy/VQrKNkVu84E1ateXW6l2nvjPNd6q6BVWODU0vdN0ogOzqMd309mFZRFwd5es4IVeVlGYxtm+BLQ+WRrMoBnct7wBgdVXbzja3eRAaiGS6xg9cYxWVumKI+VXrWpVFeyUcmKo6uP0lU0+rQYhsymoeDeB/88bEKdGt8uC7iejT0+I/IV5KkPCmJqqVMiOvK1G5qbPM773q6vWMHK4sBCDVem2h2ZpprrbLeQE1wEKZWRd9wIjXa3ggDYqToO7I5bUUGDDdkN4x1XOsbdlEXxoC4NCVy6I/h8B6r4dp8s4s3r88vE3C+uO/TI9/cjiHz2Wz/lkcW84zbXapFvic4Hh5NJABj0a7KraZLxI09/FqOigcwDdy8BLRc4CCWRWeSJzpbEAzdqic5vC6OvUzFr0KPLm63VZT8BAAD//wEAAP//hSaFDxAFAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SVW4/UOhLH3/tTREiIF5LY8T1iJWBmuWi5jFghxGPZLncHkrix3T0Mn36V9PTOzO6Rjo50eIpTVbZ/+dffzoucseR+U1UwecmXQV1JTZ2mVhnGATsbmLYm0M5rQ6VmRnWeBmuD9MobhYIYToArS5nxnFomnu9K2ee+bXOJCbbYbGPcjgj7ITcuTu33g8U0Y8FcJxwRMrbn55E2HW1Ia4e5HYf58LNdudYpI5YVzwTFQxdAIbIOPFFIVUep6oQxXcc1V4RR4oAarTvKBdWaSMuMpR68CeQ34bkynvCU0h03rPNCSuUUMAUggTlrgRNKCEitGCq7iKcZaouaKWSoIHgC+k/xdK4hlSGAK7l283BHRxrdqNbNQ70fD9thzvUKWa+Q9SndlO2vU5cBuZJMGO2M0CxoK4gkIlDjpVNoMBjmOioVkVwKVMwHpzmitJJBx+44t0PZHezK5uJcYJgx+fvDW77c+ng9jxH8oiNvZOvSUN/VLd9Sr4n72E2B1KzIkKazQ6nSrLPUdBYFAqNcUR4UUonBCxRBCsaVUdxaGzj1GKQlXZDaMMo0cfzvtcDC9cChwL1XlJAguAJOPMMuaKYF8cSCVcJJBIFWCBYIaALeBcWoEBYDDZ7434R3diggZV5Z4YiwnmqCYKywUgfOrQdQNlhOCePQYaBe6uA10k4YZZSXvAu/w6EL5P861KJ2BgQQiRadDpZ6JlFL5TwhwQqllOISjKYdEAfYGSmV0iFoY5zo7u6hs+8aH913TCvkSZxcoAxuedgRW4DkdpK3p7K6Iw0ltzwvDj8v4hyG7RvIu766+Ua+fJT51Wf++sINXz+//PLt1/EYfqSXOy2Nj/jxorvai3++pV//sbkYD7lg+gAT9pWL0z5hzg3+hGk/4gKzOS39EjL21YRTWKDdadaDwvYPZ7+dc4HZ4esUD/vTLnP0mB8mPsUR++pD9Lj518mrp13Xy3+O880UD/nFoez6KsCYcVNVbrtMvEzDEVNf5ZtccPL/jX+KsfRVu7yP8eCvUjwOfimE67wGV/7LD//uK0pII3mz6HkvEycY5v782ozRwWJQnJdmXKI9bLfDvH0Dsx8x5b4q6bBQ4XFwZYjzG0h+lSummwaOMIzLvGeUkPfD00WAkB+EH5+Dw6rOq4T4TDx+Okyw/f/Sc/RB7aaqdjGXGSb8eMSUBo999eQ5XOcnm6paj9gq6RUsKrZHSO042PPV0N4VbKpqjNt3eMSxr7pNVc1YrmP6frUeilujzMOSiB7fgcVx/UmfNjkd/WaIbVp7utSsyWVQL7HmYdkS76tHj9b15veQfxwwgceLt5ef7jWHtGt79tG/h3kImMvth2Bx9+6cdrrN5o3bwTyvbPVf920L3sc5tzbGkkuCfX27XHMD07j5DwAAAP//AQAA//+bJ5QMmwgAAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
