Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/3yS0W7bPAyF7/0UvCl601+2i/7BJvRiW7KhAZYuSJ6AsRhXiEymouQsbz/YTZplA3Zl+Bzah/zIJkh2U+Gtb20BgAf9+mU9Xc9n0fcUBwmAGDeBnIUtBqUCoEPGltZJIrY0DahKaiHFTEUjnNAzxVXm5Duy8K64i+mGHwdpv1NPwYLnrRQAPUX1whZq82AmhZNm99aC7vx+zpowhFPMLm9oGeXncbCbkDVRnM5nKwt1VZmPE1OZqqzrwdznFb1m0jR6XQHwIpoYO/rRU4zekYXbT3jQ2wLAd9iShd0HNW0TjZdySPpvP0b1tbmvTXXV+v3YSqA00mPhYydZP+f0csHVtFHy/kQU9KiJOveur0SShXKcQ7JbRum9GwrxoJfhZs/rt9kmD6YydfWbIx16tudXE6TBUJy3NqNNblvP7ROyCxTPewKg3jfJCz9hdBY66iQeDfbow/DdY11VC3/H4mirV/LNWfTDU79Fosf/b+5Gcn+VntWr2n+vYODZjAe5xIFi2WMsg9+UJ9DlpeCPTQAwpYPE3TLk1vMzjufHfjCEF6ivmSI6uhzKCLMqR5x7cQtkvyVNp2BKzRgWmRJp2Z1cLX4BAAD//wEAAP//GWuHvzUDAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "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" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
