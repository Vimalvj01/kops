Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUbWvbMBD+7l9xFEq/dLIdurKJFrYlGy2sXUg+jjIU6+KKyDpXL87Ctv8+JCdxk8HYi7/Yeu5N99xzrjQFOSazVDXPAMTavX83H89vJ1Z1aDl8+5EBNMKIGueerKhxrIVz6Dh4GzCryHihDNpZMF41yGGPyMEoY+4qVfnUobVKIofvGQBAh9YpMnANoywBn1sdamXcQ38cAHaiiA0pWW3binUlq6w62Tv/mfsz/FnkX8cy2zftDpL8e5r4UT0cpALYGr/4TYtwDUcpYwTrRifZUdR/XYFR6xXFEcDRM984j40c15ZCC9e9BgA01R+xQ81BmSVl+6lyKNkFu8gkVSu0UQRupdpb47zQequgVVjg1NLXTdKIDs6jHd9OZhzKomCvL1nBirwso7ENM3wK6HyyNRnAIzlvRIODqs7eiLU7ywBUI2rksHrlWF1ZpiiPlV60qVRXslHJioOrj9JVNPq0CIbMpqHg3gb/yGEptIuNVqnx3XK4no09PiPyHPLUBwU5tdQpGR3F2g3NTe7nfW+XF6xgZfHMQo1Qhu+OTFMldAaARiw0TnAR6lqZ+kYYqdHuVhAAO1XFgd0IKzk02JDdMNEJpWPcVVkUd+rckMSlO4BPd6CKb/fBIl69PD1PzP3iukMPfH8/gshnv/VTEVnMO2FzrRb5luh8cDiaBIBBvya7miYZ34v0ZzEqGsjcCfcU0AqJg1ASmUWe6GxJ3gmjluj8tjD6KhWzBj26vNlaXfYTAAD//wEAAP//kYB8zAAFAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV3Y7UNhvHz+cqIiTECUn8FX9EHMDL6i2oQBG9gsf249mIxJ7anlm2V18ls8PuiEpVpXIU5/mwf/n7b+dNKVjLuGsaWLwU66BtpKZOU6sMF4DMBq6tCZR5bajU3CjmabA2SK+8UTgQIwgIZSk3XlDLh9e3tR7K2Pelpgx77PYp7WeEw1Q6l5b+69FijlixtBlnhIL95XmiHaMd6e0U+3mKx2/9xrW1zFg3PBOUCCyAQuQMPFFIFaNUscEYxoQWinBKHFCjNaNioFoTabmx1IM3gfwkPFfnM55SmgnDmR+kVE4BVwASuLMWBKGEgNSKo7KreJqjtqi5Qo4Kgieg/xFPlxZynQK4WloXp0c60ulO9S5O7WE+7qdY2g2y3SDbc7qr+z/PnFIKqoVxVmkgQKlhjINgygfvKHjUWlCGQRkKVFDDGWVOO43MeCGU/c65n+rt0W5sLsUKU8Tsnw4f+Erv012cE/hVR9GJ3uWpfaxbv6XdEk+xuwq525AhLxeHUqU5s9QwiwMCp0JRERRSicEPOAQ5cKGMEtbaIKjHIC1hQWrDKdfEif/WAivXlUNBeK8oIWEQCgTxHFnQXA/EEwtWDU4iDGiHgQcCmoB3QXE6DBYDDZ74n4R3cSgg5V7ZwZHBeqoJgrGDlToIYT2AssEKSrgAhoF6qYPXSNlglFFeChZ+hkNXyB8carTlVkppOB8CBeq1E2oIVjlGKXqKgjoWAldMDYYbZAPjUkrnrPKGPh70i+86n9xXzBvkWZxSoU5ufdgZe4DsbqXoz2UtIx0lndx43s7HUjF/ggXHxqXlkLGUDr/BcphxnXD3NsUw7f8HBcdmwSWsC7tz11Vh/7fd72OpEB3+ktPxcF4lJo/lOvElzTg2n5LH3a9nv51X3S7wmOL9ko7lzbHejk2AueCuadx+bbzJ0wnz2JT7UnHx3+NfUqpj06/vczr6zzmdJr8Wwl3Zghv/zaffx4YS0knRrZo8yaQFpjheXrs5OVhNhnEV9Abtcb+f4v4dRD9jLmNT83GlwtPk6pTiO8h+kyvl+w5OMM1r3ytKyMfp5SpAKFfh55fgtKnz/4z4anj+clpg/2PpJXpVu2ua21RqhAV/O2HOk8exefEa7sqLXdNsx2ST9DOsKvYnyP082cvx7h8Ldk0zp/0HPOE8NmzXNBHrXcpfP2/GfjBKnNZE8vgBLM7bj/a8yPn4dlPq87ana82WXAftGuuuy9b42Dx7ts0XP0L544gZPL59f/PlyeaQftueQ/IfIU4BS334EKzuyb3RLw/ZsnO3EOPG1v573/bgfYqltynVUjMc2ofpuntY5t1fAAAA//8BAAD//797O01fCAAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
