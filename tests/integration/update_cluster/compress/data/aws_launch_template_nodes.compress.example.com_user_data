Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return 0
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return 0
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/2yST2/bMAzF7/4URIHeCttZt2ETeikSrA22DMGyYWfGohWishhQkrd8+0Fu3D9YT4b4e8R70nPnJdulhJ6dqQAGDOhol0TR0dJjjBQNJM1UPeQ9eUpFhUHCaZAcb3M6GOjRR6oAOqeSjyvlkdRAPMVEg32a/xBJBppyLp5blZFtEdLfRBrQTyTHRLr6vjOwaNv64/u6rRftCyIDcjDzsfbSTYsUcO9pRfvsHAd3j8F60jk6AI3cJZZwj2oNDDSInmockX3Zu1m07Yavgljq46vx5Tzk8o1flOjmw+UVD+j+l87TV9oKoCdMWekOE8XyfADL3XrDTrFEuv29M3BRcl5MbB1+KtHWZ8eF/QpKjstlX6hKF91U2hZLA82I2njeN+eSmmdBBeDFfaORvIF3FcBR7Dr0iksJCTmQrktsA482eqofPsWapTlijmSu68+POxsM3FNMZ0NK3WSigRLFZjjTWMQqibr0tTC/oh6zT89NzLfZdQeyeXq8JxYPOVn5E+4UO9qSslgD1218Gy2VE3fot2Jj+V1i9Q8AAP//AQAA///Wu4yjzQIAAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6yUy46qWBiF5z4Fc3MKREUwOYN/c9cCuXNwhrhBkDvoVtMP3ymqk5NOVzqdTjFgsFb2N/jzZYllcztbfXPPz7jfUjEZZmJ5G0bcm3GFt1TSVG2Ph+ENP+KqLfFb0lQzsanTPHNxf8f9dkZRIoi4H/M0T+IRD1vqjxlFUdSPjw/Jqm5Soux4uqKL4MlTOvWGrqNTIYrg5BkQHUGmG0oLZock3nQlngXfNYBRRbdTXf20lGwZicQHA2UPpQB/gqDMDBAYnhSOi6gKnqcqYI6/jDFiZaJdEtMoZGK+YGlICTlIQMKP7PU7myBTUUBkOBFRIJIC25ZksujP4a5MqnV5VoPXe2heDIUQyY52++aoX+6JCbaMkA3SBHEJEBd2CExFX756xrvy134I+TspUqN97Q5laPPcgrury8iK2Q4yfROsmj1JA+apZ4sJUoxzjUtXFk2uFlie5aVOK+hPvtFkWSGMCEQGiE3RkIFIWSQFDmOBrdEIbAkyWf08LPAqLPyzTGREE1sxwECQ8kSzpwcHhCJZMdXlKyi85L3cEWnYrei9IAWbfXPx4S/IPy8PjAyIPzPLNGLJJty36YEVOp0V1u2NFVdJLEAeqIc2cxN+goyVPXRcnzzGpTfvT2tesILxxVSETvbe43DlMo0VRXH+1NInS37+/O2NbEpfW/N/rbpXbswcoIyqX/vvtcoz2K+t+ii+zSpD4ZRVfDy3mHH89vm8xqgNyVGsySlNL5F6IPN04Jzz+83vNrZoVruKlrvNBAnDwys3IinXBfeUlK005+x8x5hLuWvbwP9Gq971quXAKSwJNK6+6PMhCYNxaQun+l+tCuzgsTb88QY6xtbNEpr14jG2Hutyyj3N+d1KFx91+ammgDa+xN6GSxIo1hjj5l1Q0xsfR6v9DuGuy9ZNUa66yqm9S/FfrBqmJRs+puwHdRnHdtjS9LVphx9JU499U5a4f8vrEfd1XL59NYnbpcDz9EyvhzGuE6z2za39HNC6OePh74XTlHhLmc0Zzz5+t/ZzT7V4uGypIP01wp4cq9rp4CjQ9XF0WT58FZbPEKBRCIyl+b2p4eTn7E8AAAD//wEAAP//2o7CUb4FAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
