Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUW2vbMBR+9684FEpfOtkOXdlECxsJo4W1C+njKEOxTlwRWcc9ktwF9uOHlFuTwdjFL7a+c//OJzeWoh6TW5hWFgCdcqrFh0CsWhxb5T16CYEjFg25oIxDnkUXTIcSdojeG3XK0uR8XwZkNhol/CgAAAZkb8jBNYyKDHztbWyN84/r4x4QJ4bEPqVouW/EUIuGzcnO+c/cX+GvIv86VvB6aH+Q5N/TpI/m8SAVwMb4Lax6hGs4SpkixDA6KY6i/qsFQX0wlFYAR8/Dygfs9Lhlij1crzUAYKn9jANaCcYtqNhtVUItLsRFoalZIicR+KXpb50PytqNgpZxjlOm76usERt9QB7fTmYS6qoS7y9FJaqyrpOxjzN8juhDtnUFwBP54FSHe1WdfVAv/qwAMJ1qUcLynRdtw8JQmSq96XOpoRajWlQHrY9yKxZDakQ5cquOov8Yw5OEhbI+DdrkwSdsBmQJfs3GDp8RBQllnoOinjINRidH9eL3w03uH9azXV6IStTVKwt1yji5PQpLjbIFADo1tzjBeWxb49ob5bRF3l5BABxMkxZ2o1hL6LAjXgk1KGNT3FVdVXfm3JHGhT+AT7egSW//iRGv3p6eZ+Z+cd2iB76/X0Hic33rpyqxWA6KS2vm5Ybocu9wtAkAh+GFeDnNMr5X+c/iTDKQu1P+OSIrjXuhZDKrMtPZk75TzizQh01hDE0uxg4D+rLbWH3xEwAA//8BAAD//2mRNabqBAAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV3Y7UOBbH7+spIiTEDUn8ldiOuICltQtaYBH7BMf2cdoisWtsVzU9Tz9Kqgu6Z0YajTRcxTkf9i9//+28KQVrmQ5NA6sbxTZom1FRq6iRmgtAZjxXRnvKnNJ0VFxL5qg3xo9OOi1xIFoQENJQrp2ghg+vb2s9lqnvS00ZZuzmlOYF4RhKZ9Pafz0ZzBErljbjglCwvz7PtGO0I70JsV9CPH3rd669ZcG642kvhWceJCJn4IhEKhmlkg1aMyaUkIRTYoFqpRgVA1WKjIZrQx047clPwrN1ueBJqZjQnLlhHKWVwCXACNwaA4JQQmBUkqM0m3iKozKouESOErwjoP4ST5UWcg0ebC2tjeEHHelUJ3sbQ3tcTnOIpd0h2x2yvaS7Ov964RxHQZXQ1kgFBCjVjHEQTDrvLAWHSgnK0EtNgQqqOaPMKquQaSeENN8551BvT2ZnsylWCBGzezx84Cu9S3dxSeA2HUUneptD+6Nu+5Z2TzzG7irkbkeGvF4dSqXizFDNDA4InApJhZdIR/RuwMGPAxdSS2GM8YI69KMhzI9Kc8oVseKftcDG9cShIJyTlBA/CAmCOI7MK64G4ogBIwc7IgxohoF7AoqAs15yOgwGPfWOuJ+Ed3UoIOVOmsGSwTiqCII2gxmVF8I4AGm8EZRwAQw9daPyTiFlg5ZaulEw/zMcukH+3qEjcq8IKjFQtAal4cOgmZCSUcuRsdHgaBhTYAEcokTKR7W1WEZQUfud8+q7ziX7FfMOeRGnVKjBbg+zYA+Q7e0o+ktZy0hHSUd2nrfLqVTMn2DFqbFpPWYspcNvsB4X3CY8vE3Rh/lfUHBqVlz9trC9dD0p7P+0+30sFaLF/+R0Ol5WiclheZr4khacmk/J4eG/F79dVt0v8Jji/ZpO5c2p3k6Nh6XgoWnsvDXe5HDGPDXlvlRc3ff4l5Tq1PTb+5JO7nNO5+C2Qrgre3Dnv/n0/6mhhHSj6DZNHmXSCiFO19duSRY2k2HcBL1Bc5rnEOd3EN2CuUxNzaeNCs/B1pDiO8hulyvl+w7OEJat7xUl5GN4uQngy5Pw82sw7Or8OyO+Gp6/DCvMfyy9Rp/UHprmNpUaYcX/nTHn4HBqXryGu/Li0DT7Mdkl/Qybiv0Zcr8Ecz3e/Y+CQ9Msaf6AZ1ymhh2aJmK9S/nr593YD0aJYUskhx/A4LL/aC+LXI5vF1Kf9z3davbkNmi3WPe0bItPzbNn+3zxI5RfTpjB4dv3N18ebQ7p9+05JvcRYvBY6sOHYLWP7o1+fciWg72FGHe29u/7tgfnUiy9SamWmuHYPkzX3cO6HH4DAAD//wEAAP//n3k8kF8IAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
