Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/5xTTWvcMBC9+1cMgZBLKtvbNLQigZYsJYEmXTbHEorWmnXEyhpnJDld6I8v0n44m0Jpe7L13sybmTdSYynqK3JL08oCoFNOtXgfiFWLV1Z5j15C4IhFQy4o45Dn0QXToYQ9okdSJ5Um630dkNlolPCzAAAYkL0hB5cwKTLwrbexNc4/bI4jII4MiVFStNw3YqhFw+ZoH/x34S/wF5n/nCt4M7Q/EPl/mfTTPBxIAWzJ72HdI1zCK8mUIYbJUQFgqf2CA1oJxi2p2FsroRZn4m2hqVkhp034lelvnA/K2u0aV3GBM6Yf67woG31AvrqZziXUVSU+nItKVGVdJ7KPc3yK6EPmugLgkXxwqsNxtScf1bM/KQBMp1qUsHrvRduwMFSmSm/6XGqoxaQS1UHrk9yKxZAaUY7cuqPoP8XwKGGprMfUQssU+ymbAVmCX/uAnd7jc6IgocxzUNQzpsHoFKie/Tjc9O5+M9v5mahEXb1gqFPGyd1RWGqULQDQqYXFKS5i2xrXXiunLfLuHQDgYJpgyF0r1hI67IjXQg3K2JR3UVfVrTl1pHHpD+DjHWjS139mxIt3x6fZud9Cd+hB7J9XkPzcPL2ZSi6Wg+LSmkW5NbocA15tAsBheCZezfJ1vlP5eTuTCHK3yj9FZKVxvCjZzKrMdvakb5UzS/RhWxhDk4uxw4C+7LasL34BAAD//wEAAP///yjJ728EAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV3Y7UNhvHz+cqIiTECUn8bSfiAF5Wb0EFiugVPLYfz0Yk9tT2zLK9+iqZHXanrVRVKkdxng/7l7//dt6UgrWMu6aBxSuxDtomBCYYk5o64SgOalDIlQ4yMCmUsoMKVqEkNDAD6NkQBBWWSiZAMo9AXt/Weihj35eaMuyx26e0nxEOU+lcWvqvR4s5YsXSZpwRCvaX54l2jHSkt1Ps5ykev/Ub19YyY93wQJpBEqID5zQQ4xkSw9BSJqTRSgxikHIInFjnpEVAphw3gSPTTDDF3A/Cc3Xe8AatDRMDZ14qpZ0GrgEUcGctCEIJAWU0R239oNFwNBYN18hRQ/AEzD/imdJCrlMAV0vr4vRIRzrT6d7FqT3Mx/0US7tBthtke053df/7xsnUoIELhlxo7RilYIXhlCOTQ/AaOQNPg/To6cAZQQWrrJKAYTYE7r9z7qd6e7Qbm0uxwhQx+6fDB77S+3QX5wR+1VF0vHd5ah/r1m9pt8RT7K5C7jZkyMvFoUKDVU4wzYPj1hJnDbpBUs009QOVZiBOgrIEpbBsGChqMMFa1NoSheK/tcDKdeVQJlEIJY0mbhio0qicUEoxjt4EIoF6RoJ1VhgHViljKBm4Gaxk3mjF+A/CuzgUkHKvrXREWk8NQRistMoEIawH0DZYQQkXwDBQr0zwBimTgx60V4KFH+HQFfLPDlXIgyFohKToLGrLpRyY0JpRx5ExZVFZxgw4AI+okXJl1hbHCBr6eNAvvut8cl8xb5BncUqFOrn1YWfsAbK7VaI/l7WMdJR0ZON5Ox9LxfwJFhwbl5ZDxlI6/AbLYcZ1wt3bFMO0/x8UHJsFl7Au7M5dV4X933a/j6VCdPhTTsfDeZWYPJbrxJc049h8Sh53P5/9dl51u8BjivdLOpY3x3o7NgHmgrumcfu18SZPJ8xjU+5LxcV/j39JqY5Nv77P6eg/53Sa/FoId2ULbvw3n34dG0pIp0S3avIkkxaY4nh57ebkYDUZxlXQG7TH/X6K+3cQ/Yy5jE3Nx5UKT5OrU4rvIPtNrpTvOzjBNK99ryghH6eXqwChXIWfX4LTps7/M+Ir+fzltMD+r6WX6FXtrmluU6kRFvzlhDlPHsfmxWu4Ky92TbMdk03Sz7Cq2J8g9/NkL8e7fyzYNc2c9h/whPPYsF3TRKx3KX/9vBn7wShxWhPJ4wewOG8/2vMi5+PbTanP256uNVtyHbRrrLsuW+Nj8+zZNl/8COW3I2bw+Pb9zZcnm0P6bXsOyX+EOAUs9eFDsLon90a/PGTLzt1CjBtb++9924P3KZbeplRLzXBoH6br7mGZd38AAAD//wEAAP//2/1yLl8IAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
