Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/3yTTW/bPAzH7/4URIGil0SW0xc8FRrgGRoMLbC2QbbbMAyKRbtaZNHVi9sM+/CDlKReV2AnW3+SIvkjVRuK6ppso1sBNhpT1GSD1BbdKtqgOxSgqN6gGw1KFAB1jnkY0DmtUMCvAgBAaS/XBtX33sRWWw9z+HpUO330rQAw1H7CAY0AbRsqdtemu/AF64c+pN8pWBn0gKxuHcVeOT2gm/utD9ipAkD3d9I/CWik8ZjPX1JCPyqG2kWOEvDDk5022uD75Fl4zdnJl6nXP3Fe8e5VSIHz8wLAB3KyRQE0oDNyO5vsfyYyNr4AGNB5TVZAdcn4KavOik1c49LRyzajMtEHdNe3i5WAinN2ecE442VVJWMfV/gU0YdsS+kfyQcrOxzhnvwvn/1JarfLhWz+86ytHdNUpkzTPqcaKjbjjL9pdpZLMZgblZbstqPoP8TwOBLboT5AG1nv9BVREFDmPiiqpaNBq+Qon/3Y3OL+8663izPGWcX/sFAntRWHIzNUS5OGbtPgFriObatteyOtMui8gOBiqgoHXQdN9kY6JaDDjtyWyUFqk+KuKs7v9MSSwsa/kY8Pok5f/9EhXp0fTzK5d64H9Y3vv0eQeO6WfykTxXKQrjR6Xe5Bl6PDX5MAsBieyW2W+XHcy/S4aquTgWza64hOKhwXJcPkZcbZk7q1jZPXh2d4+24Xehk9ilM227nfSasb9GFfJ4Y61+YsBvRlt7f64jcAAAD//wEAAP//bcxyLQQEAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV3Y7UuBLH7/spIiTEDZ34+yPiAs6MzmF0gEXsA6zKdjkTTWL32ukeZp9+lfQ0MPuhFdJylaTqX/bP5b+dN7XiUvtd08AclFhf9k2MTDAmNfXCU7TKKuRKRxmZFEo5q6JTKAmNzAAGZqOgwlHJBEgWEMjr22U51L7r6pILDNgOOQ8TwmGsrc9zd3d0WBIuWPcFJ4SK3eV5oi0jLencmLppTMfP3ca1lUy4bHggjZWE6Mg5jcQEhsQwdJQJabQSVlgpbeTEeS8dAjLluYkcmWaCKeZ/EJ5fpg3Pam2YsJwFqZT2GrgGUMC9cyAIJQSU0Ry1C1aj4WgcGq6Ro4YYCJh/xDN1D2UZI/il7n0av9KR1rS682ncH6bjMKa63yD3G+T+nG6X4bczZ6TomUEuNZhIDVqpKGWWceshWk8M0UELLRUy6r3iimuvY0CAiEboL5wh36cpQ2hD9ndYNshzc+oCy+jXh5uw+2zUL0p0Z9We2pbwlopHHijzxX5Cg1NeMM2j584R7wx6K6lmmgZLpbHES1COoBSOWUtxXYBzqLUjCsW/u78r1xP7MYlCKGk08dZSpVF5oZRiHIOJRAINjETnnTAenFLGUGK5sU6yYLRi/AfhXewHSHnQTnoiXaCGIFgnnTJRCBcAtItOUMIFMIw0KBODQcqk1VYHJVj8EfZbIf9oP8MlQQDiiVXSOYPOBiGBUBGFU5oZb43UVEaphFJE6xBRRXSbCSQ1320/gOJv/8Z/V9OxLlg+wIx94/N8KFhri59hPky4jri7yimOw3+gYt/MOMd1Zn+ueiLs/rL6JtUFksf/lXw8nGdJOWB9mviUJ+ybDzng7v9nw51n3a7nlNPDnI/1zXG57ZsIU8Vd0/hhLbwu4wlL39SHuuAcvsQ/5bz0Tbd+T/kYPpZ8GsMqhPu6BTf+6w8/9w0lpFWiJS0l32TyDGPqL5/tlD2sLsO0dvQa3XEYxjS8hRQmLLVvlnJcqfA0+mXM6S2UsLUrl4cWTjBOa90rSsj78eXagFifhJ9fguPWnf8WxFfy+ctxhuHP0kv0iXbXNLe5Lglm/OmEpYwB++bFa7ivL3ZNs52TraUfYe1id4LSTaO7nO/uq2DXNFMe3uEJp75hu6ZJuNzncvdxc/ajUdK4JnLAd+Bw2n6j50nO57cdc1e2PV01W3J92a+x9qlsjffNs2fbeOk91F+PWCDg1c31p282h3Tb9hxyuEmxwFVOC4wJy83ai765M7UdfFkHPMCxYs9bdpa/hzRGrMvjunHx39wz3fyYrTt/CyltS9l/v807CCGn2rmcl7oUOOwfh2sfYJ52vwMAAP//AQAA//83fqhYbAgAAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
