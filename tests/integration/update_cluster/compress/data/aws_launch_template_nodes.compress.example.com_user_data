Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/3yS0W7bPAyF7/0UvCl601+2i/7BJvRiW7KhAZYuSJ6AsRhXiEymouQsbz/YTZplA3Zl+Bzah/zIJkh2U+Gtb20BgAf9+mU9Xc9n0fcUBwmAGDeBnIUtBqUCoEPGltZJIrY0DahKaiHFTEUjnNAzxVXm5Duy8K64i+mGHwdpv1NPwYLnrRQAPUX1whZq82AmhZNm99aC7vx+zpowhFPMLm9oGeXncbCbkDVRnM5nKwt1VZmPE1OZqqzrwdznFb1m0jR6XQHwIpoYO/rRU4zekYXbT3jQ2wLAd9iShd0HNW0TjZdySPpvP0b1tbmvTXXV+v3YSqA00mPhYydZP+f0csHVtFHy/kQU9KiJOveur0SShXKcQ7JbRum9GwrxoJfhZs/rt9kmD6YydfWbIx16tudXE6TBUJy3NqNNblvP7ROyCxTPewKg3jfJCz9hdBY66iQeDfbow/DdY11VC3/H4mirV/LNWfTDU79Fosf/b+5Gcn+VntWr2n+vYODZjAe5xIFi2WMsg9+UJ9DlpeCPTQAwpYPE3TLk1vMzjufHfjCEF6ivmSI6uhzKCLMqR5x7cQtkvyVNp2BKzRgWmRJp2Z1cLX4BAAD//wEAAP//GWuHvzUDAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "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" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
