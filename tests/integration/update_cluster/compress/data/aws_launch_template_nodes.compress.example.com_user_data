Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return 0
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return 0
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/2ySQW/bOBCF7/oVRIDcspSUZI1dIpfAxibGNoURt+h5TI4UwhTHnSHV+N8XlO2kbnMSNN8jH2fe2EDZzSl2vjeVUgNE6HGdiKHHeQARFKMSZ6wsxQQ+IrsiDNR/whGDUT52VCnFOdoClBqRxVM0qtWtvq3OCjPd3laO7Ba5iGXrd8soCUI4umzzBldMr/uCbciSkOfLxbNRbdPof2e60U3dtgXu8jN+zyhpYkOllB+gR6MYey+J93r7j2hPdbnzr9106djq65luzhq4nkwDpmIJkeJ+oCz3Ob0Y1UEQLGY9U94t2I/IRsleEg7urf5MlIyqpxdTdium0bsixNeEHCG897L4vD60MrvVjW6bXwgN4KM5/epAdjqIETYBF7jJfe9j/wjRBeRTKkrh6G3yFB+BnVEDDsR7DSP4UM7dtU3z5K8iOezkrHx5Kvrylf8Y8e7vy6tphn9IT9UzbaVUh5Ay4wMklEP68/XyyfcM5Un339ZGXZR3XkxsGb8w4irk3hf2NR6SKpN6U5Us7LSPKygJ1CNwHfymPoZUvwt+S1GpHbll7Bjmp1VdfrwQO8iC5kbPDmeeIPoOJR0NMdnJhCMmlHo4UilipoQ2/V9YWGAHOaT3JE7drO0LujwN743JS06OfsQHBosrZE/OqJtGPkZz9slbCCtyUtZFqp8AAAD//wEAAP//9hukL6gDAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6yUTY+qSBSG9/4K9uZeERTBpBcHqkBUEASh6R0iIMhH8WWpmR8/aXqSm8ncTCaTrkUt3jfnWZw8OUpRDxerre/ZJW7XTEi7iVJXSZY6cXuP2/WEYRRQ4rbPkiwK+7hbM39MGIZhfnw+GWu6ySj46OqqroCLx3TsDV2Xz7miwDFLgeoypLqhEjAbGYmmg0QOTo4BrKY4jeboZx7ZWFboCQw5fag5nEaInJqeDIaL/H4elN7zXHrsx7vRBxymm2tkGjmm5gt4A0X0gID6n9nrVzZCxiKHwDgGVIUAebaNMJ23F39bROWyuGjea++bV0OlFNnBdld/6Nd7ZIKNZdkGNEIcCtSBrQymqvOvlnVv4q3tfPFO88Qgr+2h8G1RmAt3jQ+skGsg1Vfeot7RxGOfejofIXk/3QjJwprRmwWWa7nJkUj6U6w3GKuUVYBigNBUDAwUpQHyjqwF9mYmg40gxdrXYkHUYH66YIrlGbVVAwwZEpFu7HHgIMsBVk2Nf3m5G+2LLUXddjHbSchb7errCf6C/HPzwGKQxQvLJwFHV/6OJAdOanROWpKBUxZRKEHmaQeSOpE4QvrS7hqhjR49707b81KULK9/sSWdRTv3cbgJ6YZTFGX63CRPjr69/fIGm+j31vxfq+6lE7IHKILyffe9VrkG93urPotvs8pQBXURflxIzB5P5Pm8hTLx6YdS0XOSXAPtQKdJJxwv++HUrGzFLLflDDerEeL7h1dmBCjTJeccFQRNBTvbsiaPG0K80zdatddLIsAxtxBshOqqT7vI93rels7Vv1rl2d5jaZz6AfQ4tgZLqpfzR09czhHUe5KJ24WuPKriS01JXp0QN3TXyFOtPozrvaQlgxgGi91WjpsmXdZ5sWjKY+Ve8/9iVfd1yZhr35NuPZvdatL9iOqqb+uiiNufWdXHbRUWP6O6JG3cdT/jR1iSIv4M1rwkirOJXnV9WEWx1tYDMcMyXjNVfYm7vxfHuojXjFlf4snnN5CvU7oJu+uauaWrvHtGrznd869BjHLxgd/nyLZda3imUuaeO5u7LQL7ht8mfwIAAP//AQAA//+5cMHHlwUAAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
