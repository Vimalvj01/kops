Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
	if ! validate-hash "${file}" "${hash}"; then
	  rm -f "${file}"
	else
	  return
	fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUW2vbMBR+9684FEpfOtkOXdlECxsJo4W1C+njKEOxTlwRWcc9ktwF9uOHlFuTwdjFL7a+c//OJzeWoh6TW5hWFgCdcqrFh0CsWhxb5T16CYEjFg25oIxDnkUXTIcSdojeG3XK0uR8XwZkNhol/CgAAAZkb8jBNYyKDHztbWyN84/r4x4QJ4bEPqVouW/EUIuGzcnO+c/cX+GvIv86VvB6aH+Q5N/TpI/m8SAVwMb4Lax6hGs4SpkixDA6KY6i/qsFQX0wlFYAR8/Dygfs9Lhlij1crzUAYKn9jANaCcYtqNhtVUItLsRloalZIicR+KXpb50PytqNgpZxjlOm76usERt9QB7fTmYS6qoS7y9FJaqyrpOxjzN8juhDtnUFwBP54FSHe1WdfVAv/qwAMJ1qUcLynRdtw8JQmSq96XOpoRajWlQHrY9yKxZDakQ5cquOov8Yw5OEhbI+DdrkwSdsBmQJfs3GDp8RBQllnoOinjINRidH9eL3w03uH9azXV6IStTVKwt1yji5PQpLjbIFADo1tzjBeWxb49ob5bRF3l5BABxMkxZ2o1hL6LAjXgk1KGNT3FVdVXfm3JHGhT+AT7egSW//iRGv3p6eZ+Z+cd2iB76/X0Hic33rpyqxWA6KS2vm5Ybocu9wtAkAh+GFeDnNMr5X+c/iTDKQu1P+OSIrjXuhZDKrMtPZk75TzizQh01hDE0uxg4D+rLbWH3xEwAA//8BAAD//zoJ6qHqBAAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV247UOBrH7+spIiTEDZX4fIi4gKW1C1pgEfsEn+3P1RGJXWu7qul9+lFSXdPdMyONRhqu4nwH+5e//3be1YqtjruugyUosQ72nTLUG+q05QKQuciNs5GyYCxVhlvNAo3ORRV0sBolsYKA0I5yGwR1XL69be1Yx2GoLRc4YH/I+TAjHKfa+7wM308OS8KGdV9wRqg4XJ9n2jPak8FNaZindPoxbFxby4xtw7NRi8giaETOIBCNVDNKNZPWMiaM0IRT4oFaYxgVkhpDlOPW0QDBRvKT8HybL3haGyYsZ0Eqpb0GrgEUcO8cCEIJAWU0R+1W8QxH49BwjRw1xEDA/CmeqXsobYrgW937ND3Skd70evBp2h/n02FKdb9B7jfI/SXdt8P/L7sMKLTi0hpvpeHROEkUkZHaoLxGi9Fyz6jSRAklUfMQvRGIyikOjD9yHqZ2e3Ibm8+pwZSwhKfDB746hHyX5gxh1VH0avBl2j/Wrd+y3xJPsfsGpd+QoSxXh1JtOHPUMocSgVOhqYgaqcIYJMqoJBfaauGci4IGjMoRFpWxnHJDvPh7LbByPXMoiBA0JSRKoUGQwJFFw40kgThwWnqFINFJySMBQyD4qDmV0mGkMZDwk/CuDgWkPGgnPZEuUEMQrJNOmSiECwDaRSco4QIYRhqUicEgZdJqq4MSLP4Mh66Qv3WotcZxp5SynMtIgQbjhZbRac8oxUBRUM9i5JppablFJhlXSnnvdLD08aBffdeH7L9j2SAv4tQGbfLrw804ABR/q8RwKdsz0lPSq43n/XyqDcsXWHDsfF6OBWvt8QcsxxnXCXfvc4rT4R9QcewWXOK6sL90PSsc/rD7Y6oNksd/lXw6XlZJOWB9nviWZxy7Lzng7t8Xv11W3S7wlNP9kk/13andjl2EueKu6/xhbbwp0xnL2NX72nAJv8a/5dzGbljf53wKX0s+T2EthLu6BTf+my//HTtKSK9Ev2ryJJMXmNJ4fe3n7GE1GaZV0Bt0p8NhSocPkMKMpY5dK6eVCs+Tb1NOH6CETa5c7ns4wzSvfW8oIZ+n16sAsT4Lv7wGp02dfxbEN/Ll62mBw+9Lr9Fntbuuu821JVjwP2csZQo4dq/ewl19teu67Zhskn6FVcXhDGWYJ3c93sNjwa7r5nz4hGecx47tui5hu8vl+9fN2A9GSdOayAE/gcN5+9FeFrkc337KQ9n2dK3Zkutgv8b652VrfOxevNjmS5+h/u+EBQK+/3jz7cnmkGHbnmMOnyFNEWt7+BBs/sm9MSwP2brzt5DSxrb/674dIISc6uBybrUVOO4fpuvvYZl3vwAAAP//AQAA//8PFtVZXwgAAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
