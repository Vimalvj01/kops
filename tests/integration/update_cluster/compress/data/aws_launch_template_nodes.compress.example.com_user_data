Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUbWvbMBD+7l9xFEq/dLIdurKZFrYlGy2sXUg+jjIU66KKyDpXL84C+/FDchInGYy9+Iut5950zz3nWlMQYzJLJasMgK/dxw/z8fx+YlWHNkIAaPhCo6hgybXDDKDhhkuce7Jc4lhz59BV4G3ArCbjuTJoZ8F41WAFe0QMRhET16nqlw6tVQIr+JGKdWidIgO3MMoS8LXVQSrjnvrjALAzRWxIyaRta9aVrLbqbO/8Z+4H+EHkX8cy2zftjpL8e5r4UT8dpQLYGr/5TYtwCycpYwTrRmfZSdR/XYFR6xXFEcDJM984j40YS0uhhdteAwCa5GfsUFegzJKy/VQrKNkVu84E1ateXW6l2nvjPNd6q6BVWODU0vdN0ogOzqMd309mFZRFwd5es4IVeVlGYxtm+BLQ+WRrMoBnct7wBgdVXbzja3eRAaiGS6xg9cYxWVumKI+VXrWpVFeyUcmKo6uP0lU0+rQYhsymoeDeB/88bEKdGt8uC7iejT0+I/IV5KkPCmJqqVMiOvK1G5qbPM773q6vWMHK4sBCDVem2h2ZpprrbLeQE1wEKZWRd9wIjXa3ggDYqToO7I5bUUGDDdkN4x1XOsbdlEXxoC4NCVy6I/h8B6r4dp8s4s3r88vE3C+uO/TI9/cjiHz2Wz/lkcW84zbXapFvic4Hh5NJABj0a7KraZLxI09/FqOigcwDdy8BLRc4CCWRWeSJzpbEAzdqic5vC6OvUzFr0KPLm63VZT8BAAD//wEAAP//hSaFDxAFAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/7SV327cthLG7/cphABBbrISKf4XcoDkxDiJcZLYTVAUvRySw13VErkRqXXcpy+k9dZ2W6Ao0FyJmhmSP33zkXqTM5bcbaoKRi/5MthWUlOnqVWGccDWBqatCbT12lCpmVGtp8HaIL3yRqEghhPgylJmPKeWidf7Ug65a5pc0gQ7rHcp7QaEQ59rl8bmZrY4RSyYtxMOCBmb8/NI65bWpLF9bIY+zt+alWudMmBZ8UxQPLQBFCJrwROFVLWUqlYY07Zcc0UYJQ6o0bqlXFCtibTMWOrBm0C+E54rwwlPKd1yw1ovpFROAVMAEpizFjihhIDUiqGyi3iaobaomUKGCoInoP8WT+ctTKUP4Ereutg/0JFa16pxsd8ehnnXx7xdIbcr5PaUrsvu11OXAbmSTBjtjNAsaCuIJCJQ46VTaDAY5loqFZFcClTMB6c5orSSQcseOHd92c92ZXMpFugjTv7x8J4vNz7dxiGBX3TktWzc1G8f6pZv2a6Jx9h1galekWEazw6lSrPWUtNaFAiMckV5UEglBi9QBCkYV0Zxa23g1GOQlrRBasMo08Txf9cCC9cThwL3XlFCguAKOPEM26CZFsQTC1YJJxEEWiFYIKAJeBcUo0JYDDR44r8T3tmhgJR5ZYUjwnqqCYKxwkodOLceQNlgOSWMQ4uBeqmD10hbYZRRXvI2fA+HLpB/dKhF7QwIIBItOh0s9Uyilsp5QoIVSinFJRhNWyAOsDVSKqVD0MY40T7cQ2ff1T65G5xWyJM4uUDp3fKwAzYAk9tL3pzKti2pKbnneTN/e5ti6HfvIe+7qrkSl18a/y5pNhzbC/tT5DeGXv0c5quv5UqZ4y9BHC7oxQ/D5X82b4c5F5w+wYhd5dJ4mDDnGr/BeBhwgdmclv4vZOyqEcewQLvTrCeFzV/Ovoy5QHT4bkrz4bRLTB7z08TnNGBXfUoeN/8/efW063r5xxTvxjTnN3PZd1WAIeOmqtxumXgx9Uecuirf5YKj/z3+OaXSVc3yPqTZX0/p2PulEG7zGlz5Lz596SpKSC15vej5KJNG6GN3fq2H5GAxKMalGRdo592uj7v3EP2AU+6qMs0LFR57V/oU38PkV7nSdFfDEfphmfeKEvKxf7kIEPKT8PNzsF/V+d+E+Eo8f9mPsPtz6Tn6pHZTVfuUS4QRr444Tb3HrnrxGm7zi01VrUdslfQaFhWbI0zN0Nvz1dA8FGyqaki7D3jEoavaTVVFLLdpurleD8W9UWK/JJLHD2BxWH/Sp01OR7/uUzOtPV1q1uQy2C6x+mnZEu+qZ8/W9eJHyF9nnMDj28uLz4+aQ5q1PYfkP0LsA+Zy/yFY3KM7pxnvs3nz48FDwes09O6uq2AuaVzO08btIcaVefvP/dyA9ynmxqZUcpngsL1frr6Dcdj8BgAA//8BAAD//4Od9nazCAAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
