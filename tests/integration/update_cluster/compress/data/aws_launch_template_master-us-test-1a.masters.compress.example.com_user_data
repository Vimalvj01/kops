Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWTXPbNhC961dgppPJJSbFxE1bTg5V5LRWY6WslI9eIWBFoQIBZgFQVn99ZwFSH47VTKfHdjxjW7uLxe7btw8S2gY5tWat6nLEGN+5N6+X0+XsBlUHSCbGwPCVBlmyNdcORow13PAalt4ir2GquXPgSuYxwEhY47kygItgvGqgZAeLPDolJda2voMOdMmUWdsRYx2gU9aUrMius5cjacU2leC2qp0Z57nW/TVgBO5br6zpa2cmaD0CL+RUB+cBHR2EDox3qYtD9hfZdVa8iG0o87hvG1YwqWZLwB4ErrXdVag6paEmKGIVjHFjzb6xwU2C3xwB4q2aBKnACIi3XzHKiAY8uMx1IpOw5kH7FJqumdpgfMkKsgW/saj+5NTg3Eoo2UTv+N5NqIwRYytl5ERKBOdKNs7iz4ixOMwKbackYEnDHA3Tm8hGOeqx0qFWpq/qHW/AtVzAnVqD2AsN0XynGuUX3NSA8TMVqARMhKAao6kixJwH4z9aHRq44yvQ0XOTWjtlx6n9vdWAsbElCGtkcs6D516Z+lDmJ1htrN1G50eulbzsfmclLMB5VILSRtsCnA0o4LdgPScQvJAJ5r7zjfetK/O8eP5dhK8or8fj4jzy1w4QlRxGmCc2ffPo0ecjxlTDayjZ9nuX1QIzZXOa+hVvlUtE6orseREnRQ4NvkJYAyIMw3y/b4fbZsYDGq5nVfx4a503vEnzeXN/4juuEdWA8DmA8xvgEjDSBWSccsrK6xqh5t7iw9g39x75bfyXqlL3w5HfrxbQWA9XMeLq4bmf0YY2nXt4ILoexn9wVHoDjx8hLy08iIBQWfQlu75+ES2nFJw5F4jhwyh4qzLVA5YJ27QEZgb3vGk1kOGLDL98erv8sJj9gxS5bcEomXdF/sdu644Ze8GZVXFjSlaMx9nLa6JGHmXGpU14zcUWjCwjw5LETK3xaLUGnEdFPUiN4B6I1tPZzcIdxcZ7LjY3QL8XtDxCaVjujagAlZUlK5qxuyQDIlVJGVOJP7xMJRZHJxGFBPtR/EQU2oAwpfQLGzyJ/qB4F7gvDh1eNX2LxyXQiXga4t4mJT6xHfo+Z3hwcK5HUwQJxiuuB6jo6grt/b78auNtWCR2Rh/1uek3bdj+kj39ke/c08tNtvGqk75O6qWApdiADDqN90IOd4j5d/j0wlJefptETWvZv+/M7Z2HRh7sC2t9yfKvsOjm3fKE58X4xGPjqzp8zIjL+vAK3cAq1LUy9S03UtP6Dz1Al9T7lqMsWQONxX3GO640nXtVjMdz9cxYCWt3Zn4yGBX9dT8hwKtvnzyLKH8ROljPYv9+5IRnYn7FCcW845hrtcp7oPNjwBdMNeB3Frfpxe13yyhyWDPn7nMA5GnHz0WD4GytnHOj1uB8fzF4kR+/ReRN73WjhhPSb/8f/H9t8PSy1vQlDHuFoX6Hef8FAAD//wEAAP//MYvDU9kLAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "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" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
