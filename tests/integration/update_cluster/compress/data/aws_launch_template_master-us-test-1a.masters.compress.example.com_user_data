Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWTXPbNhC961dgppPJJSbFxE1bTg5V5LRWY6WslI9eIWBFoQIBZgFQVn99ZwFSH47VTKfHdjxjW7uLxe7btw8S2gY5tWat6nLEGN+5N6+X0+XsBlUHSCbGwPCVBlmyNdcORow13PAalt4ir2GquXPgSuYxwEhY47kygItgvGqgZAeLPDolJda2voMOdMmUWdsRYx2gU9aUrMius5cjacU2leC2qp0Z57nW/TVgBO5br6zpa2cmaD0CL+RUB+cBHR2EDox3qYtD9hfZdVa8iG0o87hvG1YwqWZLwB4ErrXdVag6paEmKGIVjHFjzb6xwU2C3xwB4q2aBKnACIi3XzHKiAY8uMx1IpOw5kH7FJqumdpgfMkKsgW/saj+5NTg3Eoo2UTv+N5NqIwRYytl5ERKBOdKNs7iz4ixOMwKbackYEnDHA3Tm8hGOeqx0qFWpq/qHW/AtVzAnVqD2AsN0XynGuUX3NSA8TMVqARMhKAao6kixJwH4z9aHRq44yvQ0XOTWjtlx6n9vdWAsbElCGtkcs6D516Z+lDmJ1htrN1G50eulbzsfmclLMB5VILSRtsCnA0o4LdgPScQvJAJ5r7zjfetK/O8eP5dhK8or8fj4jzy1w4QlRxGmCc2ffPo0ecjxlTDayjZ9nuX1QIzZXOa+hVvlUtE6orseREnRQ4NvkJYAyIMw3y/b4fbZsYDGq5nVfx4a503vEnzeXN/4juuEdWA8DmA8xvgEjDSBWSccsrK6xqh5t7iw9g39x75bfyXqlL3w5HfrxbQWA9XMeLq4bmf0YY2nXt4ILoexn9wVHoDjx8hLy08iIBQWfQlu75+ES2nFJw5F4jhwyh4qzLVA5YJ27QEZgb3vGk1kOGLDL98erv8sJj9gxS5bcEomXdF/sdu644Ze8GZVXFjSlaMx9nLa6JGHmXGpU14zcUWjCwjw5LETK3xaLUGnEdFPUiN4B6I1tPZzcIdxcZ7LjY3QL8XtDxCaVjujagAlZUlK5qxuyQDIlVJGVOJP7xMJRZHJxGFBPtR/EQU2oAwpfQLGzyJ/qB4F7gvDh1eNX2LxyXQiXga4t4mJT6xHfo+Z3hwcK5HUwQJxiuuB6jo6grt/b78auNtWCR2Rh/1uek3bdj+kj39ke/c08tNtvGqk75O6qWApdiADDqN90IOd4j5d/j0wlJefptETWvZv+/M7Z2HRh7sC2t9yfKvsOjm3fKE58X4xGPjqzp8zIjL+vAK3cAq1LUy9S03UtP6Dz1Al9T7lqMsWQONxX3GO640nXtVjMdz9cxYCWt3Zn4yGBX9dT8hwKtvnzyLKH8ROljPYv9+5IRnYn7FCcW845hrtcp7oPNjwBdMNeB3Frfpxe13yyhyWDPn7nMA5GnHz0WD4GytnHOj1uB8fzF4kR+/ReRN73WjhhPSb/8f/H9t8PSy1vQlDHuFoX6Hef8FAAD//wEAAP//MYvDU9kLAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/7RWW4/bxhV+168gDAR5Mcm5X4QYiOtFY6Nx7NooiqIIijMzZyR2KY7CoWRv0R9fDCntSo6D5uJ9IjlzzjffuX2c5znjlNerqoJdUKK81JUy1BvqtOUCkLnIjbORsmAsVYZbzQKNzkUVdLAaJbGCgNCOchsEdVx+u52mfV63bZ7SCBtsNilteoR9lxufdu3tweE44IS5HrFHyNien0faMNqQ1nVD23fD4WM785pdepxmejZqEVkEjcgZBKKRakapZtJaxoQRmnBKPFBrDKNCUmOIctw6GiDYSB6Jnp/6hZ7WhgnLWZBKaa+BawAF3DsHglBCQBnNUbuSPMPRODRcI0cNMRAw/5eeyTWMUxfBT7n2Q/fAjjSm0a0funrfHzbdkOuZZD2TrJftZtr8Z6kyoNCKS2u8lYZH4yRRREZqg/IaLUbLPaNKEyWURM1D9EYgKqc4MP7Ac9NN24Obufk0TNANOIbL1xO/3Ib0YegThJJH0ajWj139YFdiqeeNS9rNBGNzohwtwaCCxyi5QBUoINWW6OA1OkEUFc5YISEIiDoStCYwh9oHNFRJr+4p3+evuTW56VIpKIwd5vY27XO7VLmGfr+Fhl5Vej+mKZVyP/1M+A+ds+B8NvAr6Hu4y5CXNrKWoUbHgKHlUVuLEixag05To7gWnEsmnFcyKk641IxQ0DYK6ygP5AvE6rcwDNjnLxPqGe2TSGHcnXWHasOZo5Y5lAicCk1F1EgVxiBRRiW50FYL51wUNGBUjrCojOWUG+LFlx3swutKd0CEoCkhUQoNggSOLBpuJAnEgdPSKwSJTkoeCRgCwUfNqZQOI42BhEeid9YdQMqDdtIT6QI1BME66ZSJQrgAoF10ghIugGGkQZkYDFImrbY6KMHiY+hOIfmp7jg03oIEotChN9HRwBUapX0gJDqptdZCgTWUAfGAzCqltYnRWOsle/i7nDutCcnf4jiTXJKTJ5g6Xx6uxxZg9Fsl2sWsZqSh5IIPi9Jaz4MUUXjhgvPeSoBIvHaScjBCBhOtJBy9dFx4G40CoM5zET3xf2zQ5jI+tqiUQxZRCUYw5IorsDIg41T6gFBEEphhXEoAT5Q0GIkzKsjgmRCWKCW5iZR/gVgfV1TmSJ8fPr5IQ+w2LyFv11X7Rr5634bvkuH9kd24vw/i1tI3/4iHNz9Nb7Q9/jvK/Q29+Wv/6tnqRZ8O4e2Yjl3AcV3Bh7x60R/yhOMPsMN15dNuP2LODX6E3b7Hwnu1nPYnyLiudriLJSy/eF0Ztp/1fjXkCQaP343psF9O2UHxrQ+5njBPNYVro3epx3X1ejZa/WWRqIXDfJMb0nC3S4f8/DBt11WEPuOqqvymuN6M3bEElu/yhLtwv/4upWldteX75xkoi3M0Nz+8X1eUkEaJpozRxU7aQTesz59NnzwUXcKhzOANusNm0w2blzCEHse8rqbxUFjhsfNTl4aXMIY5eWm8a+AIXV/8vqGEvO6eDilgzFfLX50Xu/LMfx4Rv5FfPe12sPm56Xn1ynZVVduUpwF2+OaI49gFXFdffwsf8terqpqVdU7pWyhZbI8wtn3nzn+E9sFgVVV92nyPR+zXFVtV1YDThzTevp218NQ2Q1c2UsDvwWE/37irqjT5eYDK+3wZGlPf41jvb7t19eTJYnc/F8VynKu/tMi8XWDrstpcG57Q6n0PA96D/ZL1Anhl9okFfvT9IWAdx7Sr8eOE4wB9XeaydtCX7iyFnf2HNLyG/NMBRwj44tXNu4u2Ie3cOPsUXsPQRczTKcU4+UsJ2J12S/+NuOkKvfd+i+EwV/bc2X/bB5jwbeo7f7eu4DClXVH/1Vka1qv6tw9lCyGkIbcupSlPI+zrE1xzB7t+9XBpPY1d9d9VVR1xzF0aqmcVW62q6p+nn+GPqzmh58/mSZeaB4BmM+59c6SNH7snJ9NfZ3yxfu/3mz2b8TBM3Q7zBcTvBykv/scLoKo6bf1ruttj9az6BLDYN0f2ZHXl84eOb9K+CEq+plFV7xfFezHLXfVsESCc/H0X/s5OuW/T0r+hLTK4NMkXAMMjDlNe4JZLzRXZW7xbz+JQl1sajkcc6y1CP239Fv1tGbJ5sh5QTzejX/ZZzvofAAAA//8BAAD//90KMPoXEAAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
