Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/709B9I+ibxrJSvLvNqEF5jndYizpNLvrBgzFQJNnmTBFqkdSiYd9+OFI2ZbTeN3Dyw0BEumedHe/391FaBvk1JqVqssRYw03vIaFt8hrmGruHLiSeQwwEtZ4rgzgPBivGijZXiIPSklRRIz3XQeISkLJfhsxxlgH6JQ17BU7H0XBz60OtTLufXo9CLInymaHkFmNrci6IhOonuyN/5z5QD7w/Mu+Gaai3VGQvx+GHsT7o1CM9cpf/LYF9oo9CEkeWXf+ZMSYtvUNdKBLpszKjvatLVmRXWYXI2nFBpCQcBvVzozzXOseRjACt61X1vSoMxO0HoEXcqqD84COHKED4+PTIPpFdpkVF5Emyjyu24QlTKrZArBLGXCt7V2FqlMaapB9FoxxY822scFNgl+XbMW1i+JWTYJUYATEr58xiogGPLjMdSKTsOJB+2SaPjO1wfiSFSQLfm1R/cqpwFtL5JvoO751E0pjxNhSGTmREsG5ko2z+EOMpTGo0HZKApaM3znqgeFLDRPZKEc1VgnqlNUb3oBruYAbtQKxFRqi+EY1ys+5qQHjOyWoBEyEoByjqKKOOQ/Gv7M6NHDDl6Cj5iqVNpy+ofyt1YCxsAUIa2RS3gbPvTL1Ps0fYbm2dhOV77hW8rT6jZUwB+dRCQobZXNwNqCA74P1nJrghUxt7itfe9+WeV6cfxa7V5SX43FxbLib/N4jT2T632Oe5yPGVMNrKNnmc5fVAjNlc8L8jLfKJRp1RXaecCKFBl8hrAARdlC+3ba7j82MBzRcz6r4em2dN7xJ6Ly+H+gOQ0Q5IHwI4PwauASMZAEZMU5ReV0j1NxbfGj7+t4jv46PlJW637n8dDaHxno4ixZnD/2+QRva5PfQIaoe2v/gKPUGHnchLY07iIBQWfQlu7y8iJIhAWfOBeI3IeHKPOetyoRtWuphBve8aTWQ4ODY74RZFUldsmI8zl5cEn553AQukfUrLjZgZBlZkLbA1BqPVmvA23hU9ttAcA/EvOnsau4O+8B7LtZXQL/nxG+hNCy2RlSAysqSFc3YnZpUkbKkiCnFL16kFIuDktCkm/VoteliBYQphZ/b4Onu7ZbSCYKKfYVnTV/igak6sUNDHK20LAeyfd3HNAwOjlfGFEGC8YrrXavo0xXa+235ycLbME8Uijqqc92Pw+E2P/uS37lnp4ts46cGdQ3yJYOFWIMMOsF7Iobb2/yz/vTTX54+H6Km2blCRWuDua3z0Mi9fG6tL1n+CRZdvVkMeF6MBxobD9/uNSMu6/2huIJlqGtl6mtupKYZ3dUAXVqw1xxlyRpoLG4z3nGlye9lMR7fqufGSli5I/HTnVDRX/c1Arz8/9Pnscsfme6kR7Z/DDn1MzG/4tTFvOOYa7XM+0bnB4OPmGrA31ncpKPYz5ZRpLDmlrsPAZCnGT9eGtTO1spbbtQKnO8/DF7kh0OfN73WjRpOnf72P+D/bcDT+avp/yTsNwzVu8P7dwAAAP//AQAA///l6eLetgwAAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RW3a7jthG+91MIAYLcRBL/f4xcJM2izaLZdLF5giE5tIUjiS4p++Tk6QvKP8dOd9E2zbZXkshvZj7OfDPid6XgUrabpoEpKFFf2iZGJhiTmnrhKVplFXKlo4xMCqWcVdEplIRGZgADs1FQ4ahkAiQLCOTb/bIcyrbvy5Iy7LDbpbQbEQ5D6Xya+qejwzzjgqXNOCIU7K/PE+0Y6Ujvhrkfh/n4S7/yWk1GXFZ6II2VhOjIOY3EBIbEMHSUCWm0ElZYKW3kxHkvHQIy5bmJHJlmginmPxM9v4wrPau1YcJyFqRS2mvgGkAB986BIJQQUEZz1C5YjYajcWi4Ro4aYiBg/iU9U1rIyxDBL6X18/DKjnSm072fh/YwHnfDXNqVZLuSbM/b3bL7deXJlNXABUMutPaMUnDCcMqRSRuDRs4g0CgDBmo5I6igplUSMMzFyMON525Y9ke3cvNpXmCYMYf71wu/0of0PI8JQs2j6Hjv89C+4upZ2nXjnna3QO5WypCnq0KFBqe8YJpHz50j3hn0VlLNNA2WSmOJl6AcQSkcs5aiBhOdQ60dUSj+WAlUXg8KZRKFUNJo4q2lSqPyQinFOAYTiQQaGInOO2E8OKWMocRyY51kwWjF+Geid1UoIOVBO+mJdIEagmCddMpEIVwA0C46QQkXwDDSoEwMBimTVlsdlGDxcyi0kvytQhXyaAgaISl6h9pxKS0TWjPqOTKmHCrHmAEPEBA1Uq5MNfGMoKGvjX7VXReSf8K8kjwnpyywDL4+3Ig9QPZ7JfozrGWko6QjK5/vx2NZMP8EE24bn6ZDxlI6/AWmw4jV4eb7NMdh9ycouG0mnGIN7M9WD8D+o9Zv57LA7PEvOR0P5ygTVNv2WNoFy9JSeAR9SCNum3craPPXs/rOHNZxPqf5ZUrH8t1x2W+bCGPBTdP4XTV9k4cT5m1TXsqCU7itf0hp2TZ9/R7TMbzP6TSECoTnsi6up3nz08/bhhLSKdHVDN3tpAmGeXv97MbkoUoO55reN+iOu90w736AOYyYy7ZZ8rGywtPglyHNP0AOa/JSfungBMNY7b6hhLwbvp5TwFgelr+8Lg71Wf6cEb+RX349TLD7Z+h19QG7aZp9KssME/7thDkPAbfNV9/Cc/lq0zRr06wpfQ81i/0Jcj8O7trs/Stg0zRj2v2IJxy3Dds0zYzLc8pP71eZX2QzD3UjBfwRHI7rb7dpntKhdE+mdEPq6/s6EXMaR8zt4WnYNl98ccbdmr4i81r9s0TW7eq2ravdI/DirT2MMOPN2afQZ4cX2Jzmd1D+fsQMAb9/++bDXdlJvxb+kMI7mIeIZbmkCBd/N5/66bJb9ZNxN1T3P/s9huNamasy/R7meU1J+583Tw8hpLn0LqWlLBkO7cVd9wLTuMHF30j+zgC3U9Tjhb6q/Oz7D3CGJ5yXcnZ3yGlJNXtvq1gfrmVNs4ey3zbaca+jguACUOooei2IC/VaZr0RkQnrNCIaaiBaGVngjFrFiTFMSDDn8q96vEXb0o7ajrQwHvbQ8RVS0jF7vGi0ba6j9DbXr5J1wwx5wLJqt3901K89V/pboN/+0u89310j7vSzev3oBeIjgdp/K1DdPx5OrCu8gwl+TTM8X35cv+MIt1vJtUDKMk08WE+9lcShkhAF4VxDiN6jJ6CZsZxE4IwJ50hgaEykhkZuEcL/uUD1OP+TAn060H9boHvP5x/8Q/s/4cu2OSMPQ8F8wtzuEcZl7/fon+pUW0fZa59ebgmftjl37z8AAAD//wEAAP//jAdXOE0NAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
