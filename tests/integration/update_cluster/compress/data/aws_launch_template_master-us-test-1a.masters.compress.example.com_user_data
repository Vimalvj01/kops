Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW628bNxL/rr+CyCHIl3hX6+hyd4sEOEVOazV2qkp5FCiCgiJHK1ZccjMkV1Yf/3sx5Oppu2maj60N2LvzfvxmZoW2QY6sWaiq7DHG1+7li9loNr5A1QKW7JffeozV3PAKZt4ir2CkuXPgSuYxQE9Y47kygNNgvKqhZDuK3DMl2RbRy7ctICoJJfu1xxhjLaBT1rDn7LwXCT80OlTKuA/pdU/IHiib7U1mFTYia4tMoHqwE/5z4gf0A83P1s0wJe2OjPx1M/QgPhyZYqxj/ug3DbDn7MQkaWTt+YPeidYXhZDZxitLLWAnP7ON81DLUYU2NOx5wgBj2lZX0IIumTIL29t1tWRFNsgGPWnFCpBA4FaqGRvnudYdgsAI3ER/HQyZCVr3wAs50sF5QEeK0ILx8enA+pNskBVPIkKVuZu3CnMYTsYzwDZFwLW26wmqVmmoQJbbHLixZlPb4IbBL0u24NpFcqOGQSowAqL3M0YW0YAHl7lWZBIWPGifRJObkQ3Gl6wgWvBLi+pnTgleW8L9UK/5xg0pjB5jc2XkUEoE50rWz+IvDQvN5QRtqySNIV87qoHhcw1DWStHOU5Si1NUr3kNruECrtQCxEZoiOQrVSs/5aYCjO8UoBIwFIJijKQJVcx5MP6d1aGGKz4HHTkXKbXDwT+kv7EaMCY2A2GNTMzr4LlXptqF+R7mS2tXkfmOayXvZ7+2EqbgPCpBZiNtCs4GFPBdsJ5TEbyQqcxd5kvvmzLPi/P/xOoV5aDfL44Ft0un08gTmP51l+Z5jzFV8wpKtvqvyyqBmbI59fyMN8olGLVFdl7EPhFDg58gLAARtq18s2m2zsbGAxqux5P4emmdN7xO3Xl5c8DbDxHFgPAxgPNL4BIwggVk7HGyyqsKoeLe4qnsyxuP/DI+UlTqZqvy/dkUauvhLEqcnep9TSOd9E4VIutU/q2j0Gu4W4W4NO4gAsLEoi/ZYPAkUg4BOHYuEL6pE67Mc96oTHUFy4StGypmBje8bjQQ4ZaFb96/mr2djj/DRG4bMErmbZH/tF65vcVu3YwncV5KVvT72dMBQSOPS8alOXjBxQqMLCPA0oIZWePRag14HU/lbtEI7oFAPRpfTN1+1XjPxfIC6O+URkcoDbONERNAZWXJirrv7lsCIkVJFlOI/3uaQiz2TAIKXeI765fucEAYkfmpDZ6u+Xbf3YN9scvwrO5S3A+BTsDTEKc27eEDWnn7TBDCg4PjbTRCkGC84npbKnI9QXuzKT+ZeBOmCZ2RR3kuu0nbf3E8+j9fu0f3J9lEVwd5HcRLAjOxBBl0au89NtxO5svq0y2W8v7LJOIR3n6ouXSZd/Sptb5k+SdQdPF6doDzon/AsfGmbl8zwrLe3aALmIeqUqa65EZqGv9tDtCm3X3JUZashtriJuMtV5r0nhX9/rV6bKyEhTsiP9wSFf13XyHAs38/fByrfEt0Sz2S/eOWUz0T8iecqpi3HHOt5nlX6HwvcAupBvza4ird2262jCKGNdfcfQyAPM348dKgcjZWXnOjFuB85xi8yPffEHndcV2v5lTpV/80/u/WeLqsFX2CYbdhKN9tv38HAAD//wEAAP//cpKQkKINAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RXy47jNhbd11cIAYJsIonvh5FFMt2YSTDpTKPzBZfkpS2UJHpI2dWVrx9QKrvKkw7mkaqVZPLcw3OflH8oBZeyu2samIIS9aVtlKHeUKctF4DMRW6cjZQFY6ky3GoWaHQuqqCD1SiJFQSEdpTbIKjj8vvDshzLru/LkjLssduntB8RjkPpfJr6+5PDPOOCpc04IhTsL88z7RjtSO+GuR+H+fS5X3WtJiMuqzwbtYgsgkbkDALRSDWjVDNpLWPCCE04JR6oNYZRIakxRDluHQ0QbCRvJM8v4yZPa8OE5SxIpbTXwDWAAu6dA0EoIaCM5qhdDZ7haBwarpGjhhgImP8oz5QW8jJE8Etp/Tw8qyOd6XTv56E9jqf9MJd2FdmuItttu1v2v206lRLUCOudNkCAUssYB8F0iMFTCGiMoAyjthSooJYzyrzxBpkNQmh31bkflsPJrdp8mhcYZszh5euTvtKH9DCPCUKNo+hE7/PQPuOqL+268VJ2t0DuniRHSzCo4DFKLlAFCki1JTp4jU4QRYUzVkgIAqKOBK0JzKH2AQ1V0qur5Gv8untTuiHVhEIesPT36Vj6LcstjMcDdPQm08ecllTT/e0X3H+unI3ni47fUF/pXrp8pa4bp+OZdYV3MMFvaYaHpyL4b2VuqbaWoUbHgKHlUVuLEixag05To7gWnEsmnFcyKk641IxQ0DYK6ygP5BXi5g8wzziW1wnbhe2Vo3ahreMwT5dxSLXhzFHLHEoEToWmImqkCmOQKKOSXGirhXMuChowKkdYVMZyyg3x4nXnTdV1Mw5BhKApIVEKDYIEjiwabiQJxIHT0isEiU5KHgkYAsFHzamUDiONgYQ3kncZh4CUB+2kJ9IFagiCddIpE4VwAUC76AQlXADDSIMyMRikTFptdVCCxbcYh1Xk78ahNY47pZTlXEYKNBgvtIxOe0YpBoqCehYj10xLyy0yybhSynung6XPPXIp2i4kf495FbkFpyywDL4+3Ig9QPYHJfoN1jLSUdKpqx4WpbWeBymi8MIF572VAJF47STlYIQMJlpJOHrpuPA2GgVAnecieuL/XM+uaXzrWVcP+XNdeytzy2MwgiFXXIGVARmn0geEeg8AM4xLCeCJkgYjcUYFGTwTwhKlJDeR8leI29vOuleK2nXWvRtPZcH8C0y4a3yajhlL6fAzTMcRK9XduzTHYf8XKLhrJpxiPdhvVjfA/ovWP81lgdnj33I6HbdTJqi27am0C5alpXAL+pRG3DUfVtDd37dRt2lYP1TnND9O6VR+OC2HXRNhLDXzfl9N3+fhjHnXlMey4BSu659SWnZNX3+P6RQ+5nQeQgXCQ1kXV2/e//LrrqGEdEp0tR1f7KQJhnl3+dmNyUOdbzjXXn6P7rTfD/P+R5jDiLnsmiWfqio8D34Z0vwj5LAGL+XHDs4wjNXuO0rIh+HbOQWM5Wb568viUJ/lrxnxO/n1t8ME+99DL6s32LumOaSyzDDhP86Y8xBw13zzPTyUb+6aZp3Qa0g/Qo1if4bcj4O73Cz9M+Cuaca0/xnPOO4adtc0My4PKd9/XGfqU9nMQ91IAX8Gh+P6h6Jpaglemqe+r996OY0j5vZ4P+yar77acNeeqMi8Zn8rkXW70rZ1tbsFPrG1xxFmvJL9EXojvIH9GwI/+/EUsI05TS1+XjDPMLa1J1sHY63OmtjVfk7zByj/PGGGgO9+ev/pRdmQfi2cYwofYB4iluUpxLj4l+0/Pe3W+su4H6q8X/0Bw2nN7KWyL326u2v/9+brIYQ0l96ltJQlw7F9ouseYRrvcPFXkf/nAVcvqnuhr12ycb8CGZ5xXspGt92dN2Lv8XG31k5bPwYwnzG3B4RxOfgD+vuagzXwz6xPF/Af22xn/QsAAP//AQAA//+tbJbzFQ8AAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
