Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/709B9I+ibxrJSvPvNqEF5jrd4jXpPLsPA4ZioMmzzJki1SOpxMM+/HCk5Kck67q+3BIgke754Xd3EtoGObZmqapywBi/di9fzMfzyTmqFpBIjIHhCw2yZEuuHQwYq7nhFcy9RV7BWHPnwJXMY4CBsMZzZQBnwXhVQ8m2FLljSjIsotcfW0BUEkr2R3TWAjplDXvOTgeR8EujQ6WM+5Bed4TsgbLZzmRWYSOytsgEqgdb4b8nvkff0/xs3QxT0u7AyD83Qw/iw4Epxjrmr37TAHvOjkySRtaePhgcaX1RCJltvLLUAnb0M984D7UcV2hDw54nDDCmbXUJLeiSKbO0g21XS1ZkZ9nTgbRindDl1qqZGOe51h2CwAjcRH8dLJkJWg/ACznWwXlAR4rQgvGu3MdMyZ5kZ1nxJCJUmbt567CA0XQyB+zwzbW211NUrdJQEcq7HLixZlPb4EbBr3bY540aBanACIjeTxhZRAMeXOZakUlY8qB9Ek1uxjYYX7KCaMGvLKrfOSV4ZQn3I33NN25EYQwYWygjR1IiOFeyYRZ/aVhoTqdoWyUBS5rTQT+YI1krRzlOU4tTVK95Da7hAi7VEsRGaIjkS1UrP+OmAozvFKASMBKCYoykKVXMeTD+ndWhhku+AB055ym1/cHfp7+xGjAmNgdhjUzMq+C5V6bahvkeFitr15H5jmsl72e/thJm4DwqQWYjbQbOBhTwU7CeUxG8kKnMXeYr7xtX5nlx+lUsX1GeDYfFoWS/dTqVPKHpf3eqng4YUzWvoGTrr11WCcyUzanrJ7xRLgGpLbLTInaKGBr8FGEJiNA3882m6b1NjAc0XE+m8fXCOm94nfrz8maPtxsjigHhYwDnV8AlYIQLyNjlZJVXFULFvcVj2Zc3HvlFfKSo1E2v8vPJDGrr4SRKnBzrfU9DnfSOFSLrWP6to9BruFuFuDTwIALC1KIv2dnZk0jZh+DEuUAI71vBG5WprmCZsHVDxczghteNBiLcsvDD+1fzt7PJZ5jIbQNGybwt8t+u125nsVs4k2mcmJIVw2H29Iygkcc149IkvOBiDUaWEWFpxYyt8Wi1BryKx3K7agT3QLAeT85nbrdsvOdidQ70d0bDI5SG+caIKaCysmRFPXT3rQGRoiSLKcRvnqYQix2TgEK3+M76pUscEMZkfmaDp3veb7x7sC+2GZ7UXYq7IdAJeBri3KZNvEcrbx8KQnhwcLiPxggSjFdc96Ui11O0N5vyk4k3YZbQGXmU56qbtN03x6Nv+bV7dH+STXS1l9devCQwFyuQQaf23mPDbWW+rD7dYinvv00inuHu0425dJu39Jm1vmT5J1B0/nq+h/NiuMex8ar2rxlhWW+v0DksQlUpU11wIzWNf58DtGl7X3CUJauhtrjJeMuVJr1nxXB4pR4bK2HpDsgPe6Ki/+47BHj2/4ePY5VvifbUA9m/bjnVMyF/yqmKecsx12qRd4XOdwK3kGrAX1tcp4vbzZZRxLDmiruPAZCnGT9cGlTOxsorbtQSnO8cgxf57isirzuuG9ScKv3qv8b/2xpPl7WijzDsNgzl2/f7TwAAAP//AQAA//9K639RtA0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RWW4/cthV+n18hBAjyYkm8XwYpENeLxkbj2LVRFH08JA9n1NWIE5Ez9vbXF5R2dndcB0Vb75Mk8juH37l91MucseTtpmngEJSoL22jDPWGOm25AGQucuNspCwYS5XhVrNAo3NRBR2sRkmsICC0o9wGQR2XP+1LOeZt3+eSZthht0tpNyIch9z5dOhvTw7nCQvmdsYRIWN/eZ5px2hHejdM/ThMp8/9wmsxGbEs9GzUIrIIGpEzCEQj1YxSzaS1jAkjNOGUeKDWGEaFpMYQ5bh1NECwkTwTPV/GlZ7WhgnLWZBKaa+BawAF3DsHglBCQBnNUbuaPMPRODRcI0cNMRAw/5GeyS3MZYjgS279NDyyI53pdO+noT2Op90w5XYh2S4k23W7K7t/rlUGFFpxaY230vBonCSKyEhtUF6jxWi5Z1RpooSSqHmI3ghE5RQHxh957oayP7mFm09TgWHCOTx9veeX+5A+TWOCUPMoOtX7eWgfcTWWdtl4SrsrMHf3lKMlGFTwGCUXqAIFpNoSHbxGJ4iiwhkrJAQBUUeC1gTmUPuAhirp1QPlh/x1tyZ3Q6oFhXnA3N+mY+7XKrcwHvfQ0atKH+dUUi33i6+E/9g5q5+vBn7l+sHd05DXNrKWoUbHgKHlUVuLEixag05To7gWnEsmnFcyKk641IxQ0DYK6ygP5BvE6vcwTTjmbxPqxdsXkcJ8uOgO1YYzRy1zKBE4FZqKqJEqjEGijEpyoa0WzrkoaMCoHGFRGcspN8SLbzvYldeV7oAIQVNCohQaBAkcWTTcSBKIA6elVwgSnZQ8EjAEgo+aUykdRhoDCc9E76I7gJQH7aQn0gVqCIJ10ikThXABQLvoBCVcAMNIgzIxGKRMWm11UILF59CdSvJL3XFovAUJRKFDb6KjgSs0SvtASHRSa62FAmsoA+IBmVVKaxOjsdZL9ni7XDqtC8nf4ryQXJOTC5TB14cbsQeY/V6JfoW1jHSUPOHDorTW8yBFFF644Ly3EiASr52kHIyQwUQrCUcvHRfeRqMAqPNcRE/8/zdoSxmfW1TqIauoBCMYcsUVWBmQcSp9QKgiCcwwLiWAJ0oajMQZFWTwTAhLlJLcRMq/QazPKypLpC9Pn1+lKQ6715D326Z/J9987MPPyfDxzG7c3yZxa+m7v8fTu9/KO23P/4jyeENv/jK++cPm1XjKBedf4YDbxqfDccacO/wMh+OIleRmdf1HyLhtDniINQa/Wl0B+69av5lygcnjz3M6HddTDlBt21NuC+bSUrgGfUgjbpu3C2jz51WPVg7Lb9uUprtDOuWXp7LfNhHGjJum8btqejMPZ5y3Tb7LBQ/hYf1DSmXb9PV7TKfwfk7nIVQgfMrL4hLNza8ftw0lpFOiqzPzZCcdYJi2l89uTB6qCOFUB+4G3Wm3G6bda5jCiHPeNmU+VVZ4HnwZ0vQa5rAkL813HZxhGKvdj5SQt8OLKQWM+Wr5+8viUJ/5TzPij/L7F8MBdv8OvaxeYTdNs0+5THDAd2ec5yHgtvnhJ/iUf9g0zSKjS0rfQ81if4a5Hwd3kf/+EbBpmjHtfsEzjtuGbZpmwvIpzbfvF+G7b5tpqBsp4C/gcFx+r5umdvRlWur78uczp3HEuT3eDtvmu+9W3MMQVOS8VH9tkWW7um3rancNvPfWHkeY8MHZ76FXh1ewLxD42Y+ngG2c06HFzwXnCca2DmHrYKzdWQu72E9pegv5txPOEPDVm5sPT9qG9EvjHFN4C9MQMZf7FGPxT+f9cL9b+2/G3VDpffR7DKelspfO/usxQMH3aRz83baBU0mHKvWbiw5sN+1/P5Q9hJCm3LuUSi4zHNt7d90dHMYNFv9A/n884CG6Gnbo6/Ssvr+BMzzjVPLqbr34rsje4t126am23uQ4n3Fu9whj2fs9+ttam6Ugj17vb8/ft1nP+hcAAAD//wEAAP//uxtcdTsOAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
