Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
	if ! validate-hash "${file}" "${hash}"; then
	  rm -f "${file}"
	else
	  return
	fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} (SHA256 = ${hash}) =="
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW3Y8bNRB/z19hFVV96e1mr0eBVSsRcoULvSsh6QcSqpBjTzYmXns7tvcuiD8ejb1JNrk7SukjJFKyni/Px29mVmgb5NiaparKAWM1N7yCubfIKxhr7hy4knkMMBDWeK4M4CwYr2oo2Y4i90xJVkS091MLiEpCyf4cMMZYC+iUNew5Ox1Ewq+NDpUy7n067gnZA2WzvcmswkZkbZEJVA92wv9MvEfvaX6yboYpaHdg5N+boQfx/sAUYx3zN79pgD1nRyZJI2tPHwyOtD7Lhcw2XlkqATv6zDfOQy3HFdrQsOcJA4xpW11CC7pkyiztYFfVkhXZWfZ0IK1YAxII3Fo1E+M817pDEBiBm3hfBzhmgtYD8EKOdXAe0JEitGB8fOpZf5KdZcWTiFBl7uatwwJG08kcsE0ecK3t9RRVqzRUIMttDNxYs6ltcKPgVyVbcu0iuVGjIBUYAfH2E0YW0YAHl7lWZBKWPGifRNM1YxuML1lBtOBXFtUfnAK8soT7kb7mGzciNwaMLZSRIykRnCvZMItfahbqwCnaVknAkvFrRzkwfKFhJGvlKMZpKnHy6hWvwTVcwKVagtgIDZF8qWrlZ9xUgPFMDioBIyHIx0iaUsacB+PfWh1quOQL0JFznkLrN36f/tpqwBjYHIQ1MjGvgudemWrn5jtYrKxdR+ZbrpW8n/3KSpiB86gEmY20GTgbUMDPwXpOSfBCpjR3ka+8b8o8L06/itkryrPhsDgU3A6dTiNPYPriLs3TAWOq5hWUbP21yyqBmbI51fyEN8olGLVFdlrEOhFDg58iLAERtqV8vWm2l02MBzRcT6bxeGGdN7xO1Xlx0+Ptm4h8QPgQwPkVcAkYwQIy1jhZ5VWFUHFv8Vj2xY1HfhEfySt1s1X55WQGtfVwEiVOjvV+oJZOescKkXUs/8aR6zXcrUJcancQAWFq0Zfs7OxJpPQBOHEuEL6pEq7Mc96oTHUJy4StG0pmBje8bjQQ4ZaFH9+9nL+ZTT7BRG4bMErmbZH/fr12e4vduJlMY7+UrBgOs6dnBI08DhmX+uA7LtZgZBkBlgbM2BqPVmvAq7gqd4NGcA8E6vHkfOb2o8Z7LlbnQL8zah2hNMw3RkwBlZUlK+qhu28IiOQlWUwufvM0uVjsmQQU2sR35i/t4YAwJvMzGzxt8+28uwf7YhfhSd2FuG8CnYCnIXZtmsM9Wnl7TRDCg4PDaTRGkGC84nqbKrp6ivZmU3408CbMEjojj+JcdZ22f+N49C2/do/uD7KJV/Xi6vlLAnOxAhl0Ku89NtxO5vPy0w2W8v7NJOISPkdFE4m5tJl39Jm1vmT5R1B0/mrew3kx7HFs3KnbY0ZY1rsddA6LUFXKVBfcSE3tv40B2jS7LzjKktVQW9xkvOVKk96zYji8Uo+NlbB0B+SHW6Kif/c9Ajz78uHjmOVbolvqgezfl5zymZA/5ZTFvOWYa7XIu0Tne4FbSDXgry2u077tessoYlhzxd2HAMhTjx8ODUpnY+UVN2oJzncXgxf5/h0irzuuG9ScMv3y/8L/1wpPm7WiVzDsJgzFu633XwAAAP//AQAA//9BU/tajA0AAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RW247kthF9768QDBh+WUm8Xxp+sLOLxEa8zmL9BUWy2C2MJHZIde9Ovj6gND0zvdlFkHjmSRJ5qniq6lSJP5eCS9nvmgamoER9aRtlqDfUacsFIHORG2cjZcFYqgy3mgUanYsq6GA1SmIFAaEd5TYI6rj86bgsp7Lv+7KkDAfsDikdRoTTUDqfpv7u7DDPuGBpM44IBfvr80I7RjvSu2Hux2E+f+5XXqvJiMtKz0YtIougETmDQDRSzSjVTFrLmDBCE06JB2qNYVRIagxRjltHAwQbySvR88u40dPaMGE5C1Ip7TVwDaCAe+dAEEoIKKM5aleTZzgah4Zr5KghBgLmv9IzpYW8DBH8Ulo/D0/sSGc63ft5aE/j+TDMpV1JtivJdtvulsO/tioDCq24tMZbaXg0ThJFZKQ2KK/RYrTcM6o0UUJJ1DxEbwSicooD4088D8NyPLuVm0/zAsOMOTx/feBX+pA+zWOCUPMoOtX7PLRPuBpLu248p90tkLsHytESDCp4jJILVIECUm2JDl6jE0RR4YwVEoKAqCNBawJzqH1AQ5X06pHyY/66O1O6IdWCQh6w9HfpVPqtyi2MpyN09KbSp5yWVMv95ivhPyln8/PVwG9cP7p7HvImI2sZanQMGFoetbUowaI16DQ1imvBuWTCeSWj4oRLzQgFbaOwjvJAXiBWf4R5xrG8TKhXb19ECnm6zh2qDWeOWuZQInAqNBVRI1UYg0QZleRCWy2cc1HQgFE5wqIyllNuiBcv29iV183cARGCpoREKTQIEjiyaLiRJBAHTkuvECQ6KXkkYAgEHzWnUjqMNAYSXonede4AUh60k55IF6ghCNZJp0wUwgUA7aITlHABDCMNysRgkDJptdVBCRZfY+5Ukl/OHWuN404pZTmXkQINxgsto9OeUYqBoqCexcg109Jyi0wyrpTy3ulg6ZOwr0rrQvJ3mFeSW3LKAsvg68ON2ANkf1Si32AtIx0lnXrkw6K01vMgRRReuOC8txIgEq+dpByMkMFEKwlHLx0X3kajAKjzXERP/J9rtLWMrz1U6iFb7oMRDLniCqwMyDiVPiDUIQnMMC4lgCdKGozEGRVk8EwIS5SS3ETKXyDW1x0qa6Rvx3NZMP8OE+4bn6ZTxlI6/AzTacR60O5tmuNw+AsU3DcTTrHy8JvVDbD/qvWvc1lg9vi3nM6n7ZQJqm17Lu2CZWkp3II+phH3zfsVtPv7NlM2DuvVa07z/ZTO5efzctw3EcaCu6bxh2r6Lg8XzPum3JcFp/C4/jGlZd/09XtM5/Ahp8sQKhA+lXVxjebd73/sG0pIp0RXdf9sJ00wzPvrZzcmD3WQ4Fyb5h268+EwzIdfYA4j5rJvlnyurPAy+GVI8y+Qw5q8lO87uMAwVrsfKSHvhzdzChjLzfL318WhPstfM+KP8vs3wwSH/4ReV2+wu6Y5prLMMOE/LpjzEHDf/PATfCo/7JpmHYVrSj9AzWJ/gdyPg7uO8P4JsGuaMR1+wwuO+4btmmbG5VPKdx/W4fUgm3moGyngb+BwXK/ITVNVeVV8fV9vLzmNI+b2dDfsm+++23CPQq7IvFZ/k8i6Xd22dbW7BT54a08jzPjo7FvozeEN7AsEfvbjOWAbc5pa/LxgnmFsayO1DsaqzlrY1X5O83so/zxjhoBvf3338ZlsSL8K55TCe5iHiGV5SDEu/nnPTg+7VX8ZD0Ol94c/Yjivlb0q+9qz+137vzdfDyGkufQupaUsGU7tg7vuHqZxh4t/JPl/HvAYRQ0v9LVLNt8v4AwvOC9lc7f9pG7I3uH9ftVOW/+6mC+Y2yPCuBz9Ef1drcGa+CevD3+6b9tsZ/0bAAD//wEAAP//F+NRm+cNAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
