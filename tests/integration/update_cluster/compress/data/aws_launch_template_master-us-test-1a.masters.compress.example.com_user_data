Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW32/bthN/919B9IuiL7FkJWm/q9AA85xuMZa0ntN1A4ZhOJNnmQtFqvyh2MX++OFI2bKTuH3YaxEglu4Hefe5z92JKxPExOilrEqmg1IDbrQHqdHOg/ayxpIJw+/Q9gpRDhjj0ed9i9ZKgSX7Z8AYY0I6WCgUfzUqVFI7dsH+eMatfPbngDFlqmtsUZVM6qUZpGPpLFwjf994ehwyDV62mPHKmtAIK1u0F27jPNZiwJhsbsB9KtkSlMP4/oEudL1EmeoyepXsb2f0cCkVPr48CnZ31rAeOvkZL4pRvROQ48XLAWPOGwsVlsy0aBVsTk+6hxMISzdgrEXrpNElK15no7OsOB+g5nbTeGn0AbbouZio4DxaFxNvUfv4tHfIWXaeFWcDxmqQ+mndXVjgeDa9RdsmBEEpcz+zspUKKxQl8zZQ1qCN3tQmuHHwqx4jaOQ4CImao0sI0IlWo0eXuZZnApcQlE+m6ZqJCdqXrCBZ8Ctj5WegBG8MlX+s7mHjxhTGgLGF1GIshEXnSjbK4h9xhsg2s6aVgsoD9wQeairgWNTSUY6zRJwU1Tuo0TXA8VoukW94rOSQXcta+jnoCm18pwAlxzHnFGMUzQgx51H7j0aFGq9hgSpqLlNqt6moEwXO7cs/GIU2JnaL3GiRlDfBg5e62oX5Gy5WxtxF5UdQUhxXvzMC5+i8lZyOjbI5OhMsx1+C8UAgeC4SzF3mK++bMs+L0/9H9IryfDQqDg23vdd55IlM/3vK85Q6pY4cvvvOZRW3mTQ51XwIjXSJRm2RnaY6kUKhn1lcorW4LeWHTbO9bKo9Wg1qOouvV8Z5DXWqztv1nq5vO4rB4qeAzq8QBNpIFhSxxulUqCqLFXhjH9q+XXsLV/GRopLrrcvvwznWxuMwWgwf+v1EQyT5PXSIqof2vzoKvcanXUhL8wB5sDgz1pfs/PwsSvYJOHUuEL+pEq7Mc2hkxk3dEIYZrqFuFJKgd+xmwnQWSV2yYjTKXp1T/fI4CboJ9APwO9SijCxIU2BitLdGKbQ3oKHqpwEHj8S8yfRy7vp54D3w1SXS/znxm0uFtxvNZ2ilESUr6pE71qk8RUknphBfv0ohFr2SqlmyI9mmnREsTuj4uQl+f3AfISjfZTisuxR7pqrEDoWxtdKw3JPt8j6kYXB4ODImFgVqL0FtoaKrZ9asN+VXE2/CPFEo6ijPVdcO/XZ88T3cuxfHk2ziVXt57cVLBrd8hSKoVN4jZ7idzX/Dp+v+8vj6SLt5u2X75Zzkc2N8yfKvsOjy3e0ez4vRnsbExbd9zYjLarcoLnERqkrq6gq0UNSj2xywTQP2CqwoWY21sZsMWpCK/N4Uo9GNPNFG4NIdiJ9vhZJ+3Y8W8c3L5ycR5UemW+mB7ZdLTngm5s+AUMxbsLmSi7wDOu8NHjFVo7839i4txa63tCSF0fQhFNBC6vHDoUFwNkZM9dLCZPvdNn3EmwaCw/IsO03mN6DlEp3v4kTP8/67IK87rRvUQIX5+RtPvvHkizyh5VrRV5jt5hfBs6XHvwAAAP//AQAA//8IlUPaegwAAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RWXa/jttG+968QAgS5iSR+fwi5SN5dvM2i2XSx+QHFkBzawpFFl5R99uTXF5Rs7zlptm3SbHslm3w483DmmRl+VwouZdg1DRyDEvVH28TIBGNSUy88RausQq50lJFJoZSzKjqFktDIDGBgNgoqHJVMgGQBgXx7WJZTGfq+LCnDHrt9SvsJ4TSWzqdj/3B2mGdcsLQZJ4SC/e17oR0jHendOPfTOJ8/9Cuv9ciEy0oPpLGSEB05p5GYwJAYho4yIY1WwgorpY2cOO+lQ0CmPDeRI9NMMMX8Z6Lnl2mlZ7U2TFjOglRKew1cAyjg3jkQhBICymiO2gWr0XA0Dg3XyFFDDATMv6RnSgt5GSP4pbR+Hj+yI53pdO/nsT1N5/04l3Yl2a4k2227W/Y/bzwjRc8McqnBRGrQSkUps4xbD9F6YogOWmipkFHvFVdcex0DAkQ0Qt95hvQ4TwlCF5J/wLyS3IJTFlhGXz9uwv6DUX9Vot9QLbUd4R0VVz6Qjzf5CQ1OecE0j547R7wz6K2kmmkaLJXGEi9BOYJSOGYtxXoB51BrRxSKPza/ldcL+TGJQihpNPHWUqVReaGUYhyDiUQCDYxE550wHpxSxlBiubFOsmC0Yvwz0bvJD5DyoJ30RLpADUGwTjplohAuAGgXnaCEC2AYaVAmBoOUSautDkqw+DnkV0n+Un6GS4IAxBOrpHMGnQ1CAqEiCqc0M94aqamMUgmliNYhooroVhFIan6z/ACyP3xCf6+mc1kw/whHHBqfjqeMpXT4AY6nCavF3as0x3H/f1BwaI54jNWz3069APa/evrNXBaYPf4pp/Np83KEerY9l3bBsrQUXoLepwmH5u0K2v15k9/GYW3Wc5qfjulcvjsvh6GJMBXcNY3f16Ov83jBPDTlqSx4DPf19yktQ9PX/1M6h3c5XcZQgfBY1sX1Nq9//GloKCGdEh3pKHm2k44wzsPtbzclD1VzONf4vkZ33u/Hef89zGHCXIZmyefKCi+jX8Y0fw85rMFL+amDC4xTPfcNJeTt+PWcAsbyYvnL2+JYv+X/M+I38suvxyPs/xF6W32B3TXNIZVlhiP+5YI5jwGH5qtv4bF8tWuatWrWkL6DGsX+ArmfRner9v4jYNc0U9r/gBechobtmmbG5THlh3erzq+ymce6kQL+AA6ndahuTrZq7sbU5zWrW+rX7Qpv62r3EujTvOQ0tacJZhyaL774p+jN4BU2p/ktlL+dMUPAV29ev3+WTtKvCT2l8GaOGV6leYFxxvymRm9oHkzp9j5Xkyc4Fxx4xzb4W5jHiGW5RgoX/6xP9cfrbpVRxv1Y2fzkDxjOa4JuAvUHmOc1Mu1vr6EeQkhz6V1KS1kynNqrue4JjtMOF38n+Tsd3G9Rrxf6KvbN9h9gDC84L2Uzd8ppSTV6W9Sfv72a5gDlMDTaca+jguACUOooei2IC/XtZb0RkQnrNCIaaiBaGVngjFrFiTFMSDCbWlZZ3r0NtKs9r4XpdICOr5CSztnjVaptc2up9/7eVUWMqQ4cyCOW/iGdSv/SUL+WXunvjrbnRrdA7tZe/9zyflwOZ/eLObdZvY6Rcm/oddz9iqP233JU98+nC+sK7+AIP6cZHq8D7Hdc4f46uSVIWaaJB+upt5I4VBKiIJxrCNF79AQ0M5aTCJwx4RwJDE19ZdHILUL4HyeoXue/kqBPO/pPE/Tc8jboX5T/Az4NzYY8jQXzBXN7QJiWgz+gf6hdbW1lH+v0+lr49Jmtev8OAAD//wEAAP//xoctYTINAAA=" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
