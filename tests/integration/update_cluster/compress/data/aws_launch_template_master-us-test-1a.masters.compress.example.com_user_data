Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW648bNRD/nr/CKqr6pbebvYYCq1Yi5AoXeldC0gcSqpBjTzYmXns7tvcuiD8ejb153oVS+hESKVnPy/P4zcwKbYMcWbNQVdljrOaGVzDzFnkFI82dA1cyjwF6whrPlQGcBuNVDSXbUuSOKcmKiPZ+agFRSSjZnz3GGGsBnbKGPWfnvUj4tdGhUsa9T8cdIXugbLYzmVXYiKwtMoHqwVb4n4nv0fc0P1k3wxS0OzDy783Qg3h/YIqxjvmbXzfAnrMjk6SRtecPekdan+VCZhuvLJWAHX1ma+ehlqMKbWjY84QBxrStrqAFXTJlFra3rWrJimyQDXrSihUggcCtVDM2znOtOwSBEbiO93WAYyZo3QMv5EgH5wEdKUILxsenPetPskFWPIkIVeZ+3irMYTgZzwDb5AHX2t5MULVKQwWy3MTAjTXr2gY3DH5ZsgXXLpIbNQxSgREQbz9jZBENeHCZa0UmYcGD9kk0XTOywfiSFUQLfmlR/cEpwGtLuB/qG752Q3Kjx9hcGTmUEsG5kvWz+KVmoQ6coG2VBCwZv3GUA8PnGoayVo5inKQSJ69e8RpcwwVcqQWItdAQyVeqVn7KTQUYz+SgEjAUgnyMpAllzHkw/q3VoYYrPgcdORcptP3G36e/thowBjYDYY1MzOvguVem2rr5DuZLa1eR+ZZrJU+zX1kJU3AelSCzkTYFZwMK+DlYzykJXsiU5i7ypfdNmefF+Vcxe0U56PeLQ8HN0Ok08gSmL+7TPO8xpmpeQclWX7usEpgpm1PNz3ijXIJRW2TnRawTMTT4CcICEGFTytfrZnPZ2HhAw/V4Eo+X1nnD61SdF7d7vF0TkQ8IHwI4vwQuASNYQMYaJ6u8qhAq7i0ey7649cgv4yN5pW43Kr+cTaG2Hs6ixNmx3g/U0knvWCGyjuXfOHK9hvtViEvtDiIgTCz6kg0GTyJlH4Bj5wLhmyrhyjznjcpUl7BM2LqhZGZwy+tGAxHuWPjx3cvZm+n4E0zktgGjZN4W+e83K7ez2I2b8ST2S8mKfj97OiBo5HHIuNQH33GxAiPLCLA0YEbWeLRaA17HVbkdNIJ7IFCPxhdTtxs13nOxvAD6nVLrCKVhtjZiAqisLFlR992pISCSl2QxufjN0+RisWMSUGgT35u/tIcDwojMT23wtM038+4E9sU2wrO6C3HXBDoBT0Ps2jSH92jl3TVBCA8ODqfRCEGC8YrrTaro6gna23X50cCbME3ojDyKc9l12u6N49G3/MY9Oh1kE6/ai2vPXxKYiSXIoFN5T9hwW5nPy083WMrTm0nEJXyBiiYSc2kzb+lTa33J8o+g6OLVbA/nRX+PY+NO3RwzwrLe7qALmIeqUqa65EZqav9NDNCm2X3JUZashtriOuMtV5r0nhX9/rV6bKyEhTsgP9wQFf277xHg2ZcPH8cs3xHdUA9k/77klM+E/AmnLOYtx1yred4lOt8J3EGqAX9jcZX2bddbRhHDmmvuPgRAnnr8cGhQOhsrr7lRC3C+uxi8yHfvEHndcV2v5pTpl/8X/r9WeNqsFb2CYTdhKN5Nvf8CAAD//wEAAP//kvdVx4wNAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RX247jNhJ9768QAgR5iSTeL0Yekp3BboLNZAeTLyiSRVtoSfSSsns6X7+g1Ha3sxPsJd1Pksmqw1O3Q/mHUnApu7umgSkoUV/aRhnqDXXacgHIXOTG2UhZMJYqw61mgUbnogo6WI2SWEFAaEe5DYI6Lr8/LMux7Pq+LCnDHrt9SvsR4TiUzqepvz85zDMuWNqMI0LB/vI8047RjvRumPtxmE+f+5XX6jListKzUYvIImhEziAQjVQzSjWT1jImjNCEU+KBWmMYFZIaQ5Tj1tEAwUbyRvT8Mm70tDZMWM6CVEp7DVwDKODeORCEEgLKaI7a1eQZjsah4Ro5aoiBgPmP9ExpIS9DBL+U1s/DMzvSmU73fh7a43jaD3NpV5LtSrLdtrtl/9vGUylBjbDeaQMEKLWMcRBMhxg8hYDGCMowakuBCmo5o8wbb5DZIIR2V577YTmc3MrNp3mBYcYcXr4+8St9SA/zmCDUPIpO9D4P7bNdjaVdN17S7hbI3RPlaAkGFTxGyQWqQAGptkQHr9EJoqhwxgoJQUDUkaA1gTnUPqChSnp1pXzNX3dvSjekWlDIA5b+Ph1Lv1W5hfF4gI7eVPqY05Jqub/9QvjPnbPhfDHwG+gr3MuQr9B143Q8s67wDib4Lc3w8NQE/y3NrdTWMtToGDC0PGprUYJFa9BpahTXgnPJhPNKRsUJl5oRCtpGYR3lgbxC3vwB5hnH8jppu6C9ctYusFUO83SRQ6oNZ45a5lAicCo0FVEjVRiDRBmV5EJbLZxzUdCAUTnCojKWU26IF6+rN5XXjRyCCEFTQqIUGgQJHFk03EgSiAOnpVcIEp2UPBIwBIKPmlMpHUYaAwlvRO8ih4CUB+2kJ9IFagiCddIpE4VwAUC76AQlXADDSIMyMRikTFptdVCCxbeQw0ry93KokEdD0AhJ0TvUjktpmdCaUc+RMeVQOcYMeICAqJFyZaqLZwQN9Veel6btQvL3mFeSW3LKAsvg68ON2ANkf1Ci38xaRjpKOnLlw6K01vMgRRReuOC8txIgEq+dpByMkMFEKwlHLx0X3kajAKjzXERP/J+b2bWMb6119ZA/N7W3NDetC0Yw5IorsDIg41T6gFDvAWCGcSkBPFHSYCTOqCCDZ0JYopTkJlL+Cnl7W617paxdte7deCoL5l9gwl3j03TMWEqHn2E6jlih7t6lOQ77v0DBXTPhFOvBfvO6Mey/6P3TXBaYPf4tp9NxO2WC6tueSrtgWVoKt0af0oi75sNqdPf3Teo2DuuH6pzmxymdyg+n5bBrIoylVt7vq+v7PJwx75ryWBacwnX9U0rLrunr7zGdwseczkOohvBQ1sU1mve//LprKCGdEl0dxxc7aYJh3l1+dmPyUPUN5zrL79Gd9vth3v8Icxgxl12z5FNlhefBL0Oaf4Qc1uSl/NjBGYax+n1HCfkwfDungLHcLH99WRzqs/w1I34nv/52mGD/76aX1Rvbu6Y5pLLMMOE/zpjzEHDXfPM9PJRv7ppmVeg1pR+hZrE/Q+7HwV1ulv7Z4K5pxrT/Gc847hp21zQzLg8p339cNfWpbeahbqSAP4PDcf1D0TS1BS/DU9/Xb72cxhFze7wfds1XX21215molnmt/tYi63aFbetqd2v4hNYeR5jxCvZH1hvgjdnvLPCzH08B25jT1OLnBfMMY1tnsnUw1u6shV395zR/gPLPE2YI+O6n959etA3p18Y5pvAB5iFiWZ5SjIt/Of7T027tv4z7odL71R8wnNbKXjr7Mqe7u/Z/H74eQkhz6V1KS1kyHNsnuO4RpvEOF38l+X8ecI2ihhf6OiUb9iuA4RnnpWxw2915Q/YeH3dr77T1YwDzGXN7QBiXgz+gv681WBP/jPp0Af+xz3bWvwAAAP//AQAA//+CuiHAFQ8AAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
