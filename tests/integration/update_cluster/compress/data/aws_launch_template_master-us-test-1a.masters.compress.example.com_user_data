Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/amd64/nodeup
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.21.0-alpha.1/linux/arm64/nodeup
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xW648bNRD/nr/CKqr6pbebvTsKrFqJkCtc6N0Rkj6QUIUce7Ix8drbsb13QfzxaOzN8y6U0o+QSMl6Xp7Hb2ZWaBvk0Jq5qsoeYzU3vIKpt8grGGruHLiSeQzQE9Z4rgzgJBivaijZhiK3TElWRLT3UwuISkLJ/uwxxlgL6JQ17AU77UXCr40OlTLufTpuCdkjZbOtyazCRmRtkQlUjzbC/0x8h76j+cm6Gaag3Z6Rf2+GHsT7PVOMdczf/KoB9oIdmCSNrD191DvQ+iwXMtt4ZakE7OAzXTkPtRxWaEPDXiQMMKZtdQUt6JIpM7e9TVVLVmTn2VlPWrEEJBC4pWpGxnmudYcgMAJX8b4OcMwErXvghRzq4DygI0Vowfj4tGP9LDvPirOIUGUe5i3DDAbj0RSwTR5wre3tGFWrNFQgy3UM3Fizqm1wg+AXJZtz7SK5UYMgFRgB8fYTRhbRgAeXuVZkEuY8aJ9E0zVDG4wvWUG04BcW1R+cAry2hPuBvuUrNyA3eozNlJEDKRGcK1k/i19qFurAMdpWScCS8VtHOTB8pmEga+UoxnEqcfLqhtfgGi7gSs1BrISGSL5StfITbirAeCYHlYCBEORjJI0pY86D8W+tDjVc8RnoyLlIoe02/i79tdWAMbApCGtkYl4Hz70y1cbNdzBbWLuMzLdcK3mcfWMlTMB5VILMRtoEnA0o4OdgPackeCFTmrvIF943ZZ4Xp1/F7BXleb9f7Auuh06nkScwffGQ5mmPMVXzCkq2/NpllcBM2ZxqfsIb5RKM2iI7TXUihgY/RpgDIqxL+XrVrC8bGQ9ouB6N4/HSOm94narz8m6Ht20i8gHhQwDnF8AlYAQLyFjjZJVXFULFvcVD2Zd3HvllfCSv1N1a5ZeTCdTWw0mUODnU+4FaOukdKkTWofwbR67X8LAKcandQQSEsUVfsvPzs0jZBeDIuUD4pkq4Ms95ozLVJSwTtm4omRnc8brRQIR7Fn5892r6ZjL6BBO5bcAombdF/vvt0m0tduNmNI79UrKi38+enRM08jhkXOqD77hYgpFlBFgaMENrPFqtAa/jqtwMGsE9EKiHo4uJ244a77lYXAD9Tqh1hNIwXRkxBlRWlqyo++7YEBDJS7KYXPzmWXKx2DIJKLSJH8xf2sMBYUjmJzZ42ubreXcE+2IT4UndhbhtAp2ApyF2bZrDO7Ty/poghAcH+9NoiCDBeMX1OlV09Rjt3ar8aOBNmCR0Rh7Fueg6bfvG8eRbfuueHA+yiVftxLXjLwlMxQJk0Km8R2y4jczn5acbLOXxzSTiEr5ARROJubSZN/SJtb5k+UdQdHEz3cF50d/h2LhT18eMsKw3O+gCZqGqlKkuuZGa2n8dA7Rpdl9ylCWroba4ynjLlSa950W/f62eGith7vbIj9dERf/uewR4/uXjpzHL90TX1D3Zvy855TMhf8wpi3nLMddqlneJzrcC95BqwN9aXKZ92/WWUcSw5pq7DwGQpx7fHxqUzsbKa27UHJzvLgYv8u07RF53XNerOWX61f+F/68VnjZrRa9g2E0Yindd778AAAD//wEAAP//mzuXKIwNAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RX2Y7jNhZ991cIAYK8RBL3xchDMt2YSTDpTKPzBZfkpS2UJHpI2dWVrx9QXqqc6WCWVD1JJu89PHc7lH8oBZey3TQNTEGJ+tI2MTLBmNTUC0/RKquQKx1lZFIo5ayKTqEkNDIDGJiNggpHJRMgWUAg3++X5VC2fV+WlGGH3S6l3YhwGErn09Q/HB3mGRcsbcYRoWB/fZ5ox0hHejfM/TjMx8/9ymt1GXFZ6YE0VhKiI+c0EhMYEsPQUSak0UpYYaW0kRPnvXQIyJTnJnJkmgmmmH8jen4ZV3pWa8OE5SxIpbTXwDWAAu6dA0EoIaCM5qhdsBoNR+PQcI0cNcRAwPxHeqa0kJchgl9K6+fhmR3pTKd7Pw/tYTzuhrm0K8l2Jdmet7tl99vKkymrgQuGXGjtGaXghOGUI5M2Bo2cQaBRBgzUckZQQU2rJGCYi5GHG8/dsOyPbuXm07zAMGMOL18v/Eof0uM8Jgg1j6Ljvc9D+2xXY2nXjZe0uwVyd6EcLcGggscouUAVKCDVlujgNTpBFBXOWCEhCIg6ErQmMIfaBzRUSa9ulG/56x5M6YZUCwp5wNI/pEPpacdoR1oYD3vo6F2lDzktqZb72y+E/9w5Z5wvBn4HfYN7GfINum4cDyfWFd7BBL+lGR4vTfDf0jy3pLUMNToGDC2P2lqUYNEadJoaxbXgXDLhvJJRccKlZoSCtlFYR3kgr5A3v4d5xrG8TtquaK+ctStslcM8XeVQaHDKC6Z59Nw54p1BbyXVTNNgqTSWeAnKEZTCMWspajDROdTaEYXidfWm8rqTQyZRCCWNJt5aqjQqL5RSjGMwkUiggZHovBPGg1PKGEosN9ZJFoxWjL8RvascAlIetJOeSBeoIQjWSadMFMIFAO2iE5RwAQwjDcrEYJAyabXVQQkW30IOK8nfy6FCHg1BIyRF71A7LqVlQmtGPUfGlEPlGDPgAQKiRsqVqS6eETT0+Va5Nm0Xkn/AvJI8J6cssAy+PtyIPUD2eyX6s1nLSEdJR57lOUprPQ9SROGFC857KwEi8dpJysEIGUy0knD00nHhbTQKgDrPRfTE/7mZXcv41lpXD/lzU3tP86x1wdQ7TXEFVgZknEofEOo9AMwwLiWAJ0oajMQZFWTwTAhLlJLcRMpfIW9vq3WvlLWb1r0bj2XB/AtMuG18mg4ZS+nwM0yHESvU5l2a47D7CxTcNhNOsR7sz153hv0XvX+aywKzx7/ldDycT5mg+rbH0i5YlpbCvdGnNOK2+bAabf5+lrozh/VDdU7z05SO5Yfjst82EcZSK+931fV9Hk6Yt015KgtO4bb+KaVl2/T195iO4WNOpyFUQ3gs6+Iazftfft02lJBOia6O44udNMEwb68/uzF5qPqGc53l9+iOu90w736EOYyYy7ZZ8rGywtPglyHNP0IOa/JSfurgBMNY/b6jhHwYvp1TwFjulr++Lg71Wf6aEb+TX387TLD7d9Pr6p3tpmn2qSwzTPiPE+Y8BNw233wPj+WbTdOsCr2m9CPULPYnyP04uOvN0j8bbJpmTLuf8YTjtmGbpplxeUz54eOqqZe2mYe6kQL+DA7H9Q9F09QWvA5PfV+/9XIaR8zt4WHYNl99dba7zUS1zGv1zy2yblfYtq5294YXtPYwwow3sD+yPgPemf3OAj/78RiwjTlNLX5eMM8wtnUmWwdj7c5a2NV/TvMHKP88YoaA7356/+lF25B+bZxDCh9gHiKW5ZJiXPzL8Z8uu7X/Mu6GSu9Xv8dwXCt77ezrnG437f8+fD2EkObSu5SWsmQ4tBe47gmmcYOLv5H8Pw+4RVHDC32dkjP2K4DhCeelnOHOd+cd2Qd82q6909aPAcwnzO0eYVz2fo/+odZgTfwz6uUC/mOf81n/AgAA//8BAAD//84URIQVDwAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
