Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup
NODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup
NODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87

export AWS_REGION=us-test-1




function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/r09B9I+ibxrJSvLvNqEF5jndYizpNKfrBgzFQJNnmTBFqkdSiYd9+OFI2bLTZN3Dyw0BEvF+d8d7+N0xQtsgZ9asVFMxE7TOhDWeKwO4CMarFiq2l8gRlFXGCFip5rseEJWEiv2WMcZYD+iUNewVO82i4OdOh0YZ9z4dR0H+RNl8dJk32Im8L3OB6sle+c+pH8gPLP+ybY4paXfk5O+7oQ/x/sgVYwP4i992wF6xey7JIu9Pn2SMadtcQQ+6YsqsbLYvbcXK/Dw/y6QVG0DqhNuobm6c51pXzGOADIzAbeeVNUfdBS/kTAfnAR0ZQg/Gx68D72f5eV6eZYy1XJmHsU1YwrSe3wD2KQKutb2tUfVKQwNyiIIxbqzZtja4afDriq24dlHcqWmQCoyAePsJI49owIPLXS9yCSsetE+q6ZqZDcZXrCRZ8GuL6ldOCV5bIt9U3/Ktm1IYGWNLZeRUSgTnKjbJ4w8xluheo+2VBKwYv3VUA8OXGqayVY5yrFOrU1RveAuu4wKu1ArEVmiI4ivVKr/gpgGMZwpQCZgKQTFGUU0Vcx6Mf2d1aOGKL0FH5CKlduMt8gZmmjt3KH9rNWBM7AaENTKB18Fzr0yzD/NHWK6t3UTwHddKPg6/sRIW4DwqQW6jbAHOBhTwfbCeUxG8kKnMQ+Zr77uqKMrTz2L1yup8MimPFXeTP1gUiUz/e8jyNGNMtbyBim0+d3kjMFe2oJ6f8E65RKO+zE9TnwjQ4GuEFSDCrpVvt93usrnxgIbreR2Pl9Z5w9vUndd3B9g4RBQDwocAzq+BS8BIFpCxx8krbxqEhnuL93Vf33nkl/GTolJ3O5OfThbQWg8nUePkvt03aEOX7O4bROi+/g+OQm/hYRNCadxBBITaoq/Y+flZlBwScO5cIH5TJ1xVFLxTubBtRzXM4Y63nQYSjIbDTpjXkdQVKyeT/MU59a+Im8Alsn7FxQaMrCIL0haYWePRag14zQ1vxm0guAdi3mx+sXDjPvCei/UF0O8F8VsoDTdbI2pAZWXFynbiHptUkaIkjynEL16kEMsRpG7Sm/VgtunFCggzcr+wwYMbl9IjBBX7DE/aIcWRqTqxQ0McrbQsD2T7vI9pGBwcr4wZggTjFde7UtHVNdq7bfXJxLuwSBSKGOW5HsZhfJuffclv3bPHk+ziVQd5HcRLCjdiDTLo1N5HfLi9zj+rzzD91ePPh2hodi5Q0dpgbus8tHIvX1jrK1Z8gkUXb24OeF5ODhAbH77dMScu6/1DcQHL0DTKNJfcSE0zussB+rRgLznKirXQWtzmvOdKk93LcjK5Vs+NlbByR+KnO6Giv+5rBHj5/6fPY5U/Ut1Jj3T/uOVUz8T8mlMVi55jodWyGApdjAofMdWAv7W4SY/iMFtGEWDNNXcfAiBPM368NKicnZXX3KgVOD9cDF4U40NftAPqspZTpb/9r/H/tsbT89fQ/0k4bBjKd9fv3wEAAP//AQAA//+BKUrfngwAAA==" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/8RW25LjthF911ewXOXyi0niflH5wc5uJd6Kx9laf0EDaEisoQgFoDQef30KpDQjOetcnN34iRJwuvt092kA35WCc9lumgYOQYn6o21iZIIxqakXnqJVViFXOsrIpFDKWRWdQkloZAYwMBsFFY5KJkCygEC+3c/zsWz7vswpww67XUq7EeE4lM6nQ/94cpgnnLG0GUeEgv31e6YdIx3p3TD14zCdfu4XXovJiPNCD6SxkhAdOaeRmMCQGIaOMiGNVsIKK6WNnDjvpUNApjw3kSPTTDDF/Gei5+dxoWe1NkxYzoJUSnsNXAMo4N45EIQSAspojtoFq9FwNA4N18hRQwwEzL+lZ0oLeR4i+Lm0fhpe2ZHOdLr309Aex9NumEq7kGwXku263c27XxaeTFkNXDDkQmvPKAUnDKccmbQxaOQMAo0yYKCWM4IKalklAcNcjDy88NwN8/7kFm4+TTMME+Zw+/PCr/QhPU1jglDrKDre+zy0r7iaS7ts3NLuZsjdQhny4apQocEpL5jm0XPniHcGvZVUM02DpdJY4iUoR1AKx6ylqMFE51BrRxSKTyuByutOoUyiEEoaTby1VGlUXiilGMdgIpFAAyPReSeMB6eUMZRYbqyTLBitGP9M9K4KBaQ8aCc9kS5QQxCsk06ZKIQLANpFJyjhAhhGGpSJwSBl0mqrgxIsfg6FVpK/VqhCHg1BIyRF71A7LqVlQmtGPUfGlEPlGDPgAQKiRsqVqSaeETT0ddCvuutC8o+YF5JrccoM8+Drx43YA2S/V6JfYS0jHSUdWfi8GU9lxvwjHHDb+HQ4Ziylw5/hcByxOty8SVMcdn+CgtvmgIdYA/vV6g7Yf9T63VRmmDz+JafTcY1ygGrbnko7Y5lbCvegD2nEbfOwgDZ/XdW3cliO8ylNz4d0Kt+d5v22iTAW3DSN31XTt3k4Y9425bnMeAgv6x9SmrdNX/+P6RTe53QeQgXCU1kWl2ze/vjTtqGEdEp0tUI3O+kAw7S9/u3G5KFKDqda3rfoTrvdMO2+hymMmMu2mfOpssLz4OchTd9DDkvxUn7u4AzDWO2+oYQ8DF9PKWAsd8tfXheH+i1/zojfyC+/Hg6w+2fodfUOu2mafSrzBAf82xlzHgJum6++hafy1aZplqFZSvoeahX7M+R+HNx12PtXwKZpxrT7Ac84bhu2aZoJ56eUH98vMr/IZhrqRgr4Azgcl2t3DbIOczekPi9dXVu/bFd4W1e7e2A9N3Ma2+MIE26bL774l+jV4QU2pekByt9PmCHgm3dvP9y0k/RLQ48pPMA0RCzzJXWc/c250x8uu1UXGXdDdf+T32M4LRW/Ks7vYZqWVNv/fih6CCFNpXcpzWXOcGwv7rpnOIwbnP0Lyd8Z4CWLml7oq3pX35/AGZ5xmsvq7pjTnGr13lUR3j23mmYPZb9ttONeRwXBBaDUUfRaEBfqc8t6IyIT1mlENNRAtDKywBm1ihNjmJBg1vYvOnuJtqUdtR1pYTzuoeMLpKRT9njRXttcj8iX87p7NIti3DBBHrD0j+lY+ntH/TJLpX8J9Our+tbzzfPgRj+L148+DD4SqP2PAtX90/HMusI7OMAvaYKny4X0O1J4eW1cG6Qs08SD9dRbSRwqCVEQzjWE6D16ApoZy0kEzphwjgSGxkRqaOQWIfzBDarp/F8a9NuB/tcG3XpeL+678X/E522zIo9DwXzG3O4Rxnnv9+gf66m2HGWvc3q5/X/bZp3efwAAAP//AQAA//8xu3nyJQ0AAA==" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
