Resources.AWSAutoScalingLaunchConfigurationmasterustest1amasterscomplexexamplecom.Properties.UserData: "#!/bin/bash\n#
  Copyright 2016 The Kubernetes Authors All rights reserved.\n#\n# Licensed under
  the Apache License, Version 2.0 (the \"License\");\n# you may not use this file
  except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#
  \    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable
  law or agreed to in writing, software\n# distributed under the License is distributed
  on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  or implied.\n# See the License for the specific language governing permissions and\n#
  limitations under the License.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nNODEUP_URL=https://artifacts.k8s.io/binaries/kops/1.8.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/1.8.1/linux-amd64-nodeup,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/nodeup\nNODEUP_HASH=bb41724c37d15ab7e039e06230e742b9b38d0808\n\nexport
  AWS_REGION=us-test-1\n\n\n\n\nfunction ensure-install-dir() {\n  INSTALL_DIR=\"/var/cache/kubernetes-install\"\n
  \ # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)\n
  \ if [[ -d /var/lib/toolbox ]]; then\n    INSTALL_DIR=\"/var/lib/toolbox/kubernetes-install\"\n
  \ fi\n  mkdir -p ${INSTALL_DIR}\n  cd ${INSTALL_DIR}\n}\n\n# Retry a download until
  we get it. args: name, sha, url1, url2...\ndownload-or-bust() {\n  local -r file=\"$1\"\n
  \ local -r hash=\"$2\"\n  shift 2\n\n  urls=( $* )\n  while true; do\n    for url
  in \"${urls[@]}\"; do\n      commands=(\n        \"curl -f --ipv4 --compressed -Lo
  \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only
  --compression=auto -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n        \"curl
  -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget
  --inet4-only -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n      )\n
  \     for cmd in \"${commands[@]}\"; do\n        echo \"Attempting download with:
  ${cmd} {url}\"\n        if ! (${cmd} \"${url}\"); then\n          echo \"== Download
  failed with ${cmd} ==\"\n          continue\n        fi\n        if [[ -n \"${hash}\"
  ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n          echo \"== Hash validation
  of ${url} failed. Retrying. ==\"\n          rm -f \"${file}\"\n        else\n          if
  [[ -n \"${hash}\" ]]; then\n            echo \"== Downloaded ${url} (SHA1 = ${hash})
  ==\"\n          else\n            echo \"== Downloaded ${url} ==\"\n          fi\n
  \         return\n        fi\n      done\n    done\n\n    echo \"All downloads failed;
  sleeping before retrying\"\n    sleep 60\n  done\n}\n\nvalidate-hash() {\n  local
  -r file=\"$1\"\n  local -r expected=\"$2\"\n  local actual\n\n  actual=$(sha256sum
  ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\"
  ]]; then\n    echo \"== ${file} corrupted, hash ${actual} doesn't match expected
  ${expected} ==\"\n    return 1\n  fi\n}\n\nfunction split-commas() {\n  echo $1
  | tr \",\" \"\\n\"\n}\n\nfunction try-download-release() {\n  # TODO(zmerlynn):
  Now we REALLY have no excuse not to do the reboot\n  # optimization.\n\n  local
  -r nodeup_urls=( $(split-commas \"${NODEUP_URL}\") )\n  if [[ -n \"${NODEUP_HASH:-}\"
  ]]; then\n    local -r nodeup_hash=\"${NODEUP_HASH}\"\n  else\n  # TODO: Remove?\n
  \   echo \"Downloading sha256 (not found in env)\"\n    download-or-bust nodeup.sha256
  \"\" \"${nodeup_urls[@]/%/.sha256}\"\n    local -r nodeup_hash=$(cat nodeup.sha256)\n
  \ fi\n\n  echo \"Downloading nodeup (${nodeup_urls[@]})\"\n  download-or-bust nodeup
  \"${nodeup_hash}\" \"${nodeup_urls[@]}\"\n\n  chmod +x nodeup\n}\n\nfunction download-release()
  {\n  # In case of failure checking integrity of release, retry.\n  until try-download-release;
  do\n    sleep 15\n    echo \"Couldn't download release. Retrying...\"\n  done\n\n
  \ echo \"Running nodeup\"\n  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793\n
  \ ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml
  --v=8  )\n}\n\nfunction run-bootstrap-scripts() {\n\tcat ./bootstrap_scripts.txt
  | while read scripturl scripthash; do\n\t\ttry-run-bootstrap-script \"$scripthash\"
  \"$scripturl\"\n\tdone\n}\n\nfunction try-run-bootstrap-script() {\n\tlocal -r scripthash=\"$1\"\n\tlocal
  -r scripturls=( $(split-commas \"$2\") )\n\tlocal -r scriptname=\"${scripturls[0]##*/}\"\n\n\tif
  [[ -n \"${scripthash}\" ]]; then\n\t\tlocal -r scriptsha1=\"${scripthash}\"\n\telse\n\t\techo
  \"Downloading ${scriptname}.sha1 (not found in env)\"\n\t\tdownload-or-bust \"\"
  \"${scripturls[@]/%/.sha1}\"\n\t\tlocal -r scriptsha1=$(cat \"${scriptname}.sha1\")\n\tfi\n\n\techo
  \"Downloading ${scriptname} (${scripturls[@]})\"\n\tdownload-or-bust \"${scriptsha1}\"
  \"${scripturls[@]}\"\n\n\techo \"=== Running ${scriptname} ===\"\n\tchmod +x \"$scriptname\"\n\t./$scriptname\n\techo
  \"=== Completed ${scriptname} ===\"\n}\n\n####################################################################################\n\n/bin/systemd-machine-id-setup
  || echo \"failed to set up ensure machine-id configured\"\n\necho \"== nodeup node
  config starting ==\"\nensure-install-dir\n\ncat > bootstrap_scripts.txt << '__EOF_BOOTSTRAP_SCRIPTS'\n\n__EOF_BOOTSTRAP_SCRIPTS\n\ncat
  > cluster_spec.yaml << '__EOF_CLUSTER_SPEC'\ncloudConfig: null\ncontainerRuntime:
  docker\ncontainerd:\n  skipInstall: true\ndocker:\n  ipMasq: false\n  ipTables:
  false\n  logDriver: json-file\n  logLevel: warn\n  logOpt:\n  - max-size=10m\n  -
  max-file=5\n  storage: overlay2,overlay,aufs\n  version: 18.06.3\nencryptionConfig:
  null\netcdClusters:\n  events:\n    version: 3.3.10\n  main:\n    version: 3.3.10\nkubeAPIServer:\n
  \ allowPrivileged: true\n  anonymousAuth: false\n  apiServerCount: 1\n  auditWebhookBatchThrottleQps:
  3140m\n  authorizationMode: AlwaysAllow\n  bindAddress: 0.0.0.0\n  cloudProvider:
  aws\n  enableAdmissionPlugins:\n  - NamespaceLifecycle\n  - LimitRanger\n  - ServiceAccount\n
  \ - PersistentVolumeLabel\n  - DefaultStorageClass\n  - DefaultTolerationSeconds\n
  \ - MutatingAdmissionWebhook\n  - ValidatingAdmissionWebhook\n  - NodeRestriction\n
  \ - ResourceQuota\n  etcdServers:\n  - http://127.0.0.1:4001\n  etcdServersOverrides:\n
  \ - /events#http://127.0.0.1:4002\n  image: k8s.gcr.io/kube-apiserver:v1.14.0\n
  \ insecureBindAddress: 127.0.0.1\n  insecurePort: 8080\n  kubeletPreferredAddressTypes:\n
  \ - InternalIP\n  - Hostname\n  - ExternalIP\n  logLevel: 2\n  requestheaderAllowedNames:\n
  \ - aggregator\n  requestheaderExtraHeaderPrefixes:\n  - X-Remote-Extra-\n  requestheaderGroupHeaders:\n
  \ - X-Remote-Group\n  requestheaderUsernameHeaders:\n  - X-Remote-User\n  securePort:
  443\n  serviceClusterIPRange: 100.64.0.0/13\n  serviceNodePortRange: 28000-32767\n
  \ storageBackend: etcd3\nkubeControllerManager:\n  allocateNodeCIDRs: true\n  attachDetachReconcileSyncPeriod:
  1m0s\n  cloudProvider: aws\n  clusterCIDR: 100.96.0.0/11\n  clusterName: complex.example.com\n
  \ configureCloudRoutes: true\n  image: k8s.gcr.io/kube-controller-manager:v1.14.0\n
  \ leaderElection:\n    leaderElect: true\n  logLevel: 2\n  useServiceAccountCredentials:
  true\nkubeProxy:\n  clusterCIDR: 100.96.0.0/11\n  cpuRequest: 100m\n  hostnameOverride:
  '@aws'\n  image: k8s.gcr.io/kube-proxy:v1.14.0\n  logLevel: 2\nkubeScheduler:\n
  \ image: k8s.gcr.io/kube-scheduler:v1.14.0\n  leaderElection:\n    leaderElect:
  true\n  logLevel: 2\nkubelet:\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS:
  100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard:
  memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n
  \ featureGates:\n    ExperimentalCriticalPodAnnotation: \"true\"\n  hostnameOverride:
  '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginMTU:
  9001\n  networkPluginName: kubenet\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podInfraContainerImage:
  k8s.gcr.io/pause-amd64:3.0\n  podManifestPath: /etc/kubernetes/manifests\nmasterKubelet:\n
  \ cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain:
  cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n
  \ featureGates:\n    ExperimentalCriticalPodAnnotation: \"true\"\n  hostnameOverride:
  '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginMTU:
  9001\n  networkPluginName: kubenet\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podInfraContainerImage:
  k8s.gcr.io/pause-amd64:3.0\n  podManifestPath: /etc/kubernetes/manifests\n  registerSchedulable:
  false\n\n__EOF_CLUSTER_SPEC\n\ncat > ig_spec.yaml << '__EOF_IG_SPEC'\nkubelet: null\nnodeLabels:
  null\ntaints: null\n\n__EOF_IG_SPEC\n\ncat > kube_env.yaml << '__EOF_KUBE_ENV'\nAssets:\n-
  c3b736fd0f003765c12d99f2c995a8369e6241f4@https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubelet\n-
  7e3a3ea663153f900cbd52900a39c91fa9f334be@https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl\n-
  52e9d2de8a5f927307d9397308735658ee44ab8d@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-plugins-amd64-v0.7.5.tgz\n-
  42b15a0a0a56531750bde3c7b08d0cf27c170c48@https://artifacts.k8s.io/binaries/kops/1.8.1/linux/amd64/utils.tar.gz,https://github.com/kubernetes/kops/releases/download/1.8.1/linux-amd64-utils.tar.gz,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/utils.tar.gz\nClusterName:
  complex.example.com\nConfigBase: memfs://clusters.example.com/complex.example.com\nInstanceGroupName:
  master-us-test-1a\nTags:\n- _automatic_upgrades\n- _aws\nchannels:\n- memfs://clusters.example.com/complex.example.com/addons/bootstrap-channel.yaml\netcdManifests:\n-
  memfs://clusters.example.com/complex.example.com/manifests/etcd/main.yaml\n- memfs://clusters.example.com/complex.example.com/manifests/etcd/events.yaml\nprotokubeImage:\n
  \ hash: 0b1f26208f8f6cc02468368706d0236670fec8a2\n  name: protokube:1.8.1\n  sources:\n
  \ - https://artifacts.k8s.io/binaries/kops/1.8.1/images/protokube.tar.gz\n  - https://github.com/kubernetes/kops/releases/download/1.8.1/images-protokube.tar.gz\n
  \ - https://kubeupv2.s3.amazonaws.com/kops/1.8.1/images/protokube.tar.gz\n\n__EOF_KUBE_ENV\n\nrun-bootstrap-scripts\ndownload-release\necho
  \"== nodeup node config done ==\"\n"
Resources.AWSAutoScalingLaunchConfigurationnodescomplexexamplecom.Properties.UserData: "#!/bin/bash\n#
  Copyright 2016 The Kubernetes Authors All rights reserved.\n#\n# Licensed under
  the Apache License, Version 2.0 (the \"License\");\n# you may not use this file
  except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#
  \    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable
  law or agreed to in writing, software\n# distributed under the License is distributed
  on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  or implied.\n# See the License for the specific language governing permissions and\n#
  limitations under the License.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nNODEUP_URL=https://artifacts.k8s.io/binaries/kops/1.8.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/1.8.1/linux-amd64-nodeup,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/nodeup\nNODEUP_HASH=bb41724c37d15ab7e039e06230e742b9b38d0808\n\nexport
  AWS_REGION=us-test-1\n\n\n\n\nfunction ensure-install-dir() {\n  INSTALL_DIR=\"/var/cache/kubernetes-install\"\n
  \ # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)\n
  \ if [[ -d /var/lib/toolbox ]]; then\n    INSTALL_DIR=\"/var/lib/toolbox/kubernetes-install\"\n
  \ fi\n  mkdir -p ${INSTALL_DIR}\n  cd ${INSTALL_DIR}\n}\n\n# Retry a download until
  we get it. args: name, sha, url1, url2...\ndownload-or-bust() {\n  local -r file=\"$1\"\n
  \ local -r hash=\"$2\"\n  shift 2\n\n  urls=( $* )\n  while true; do\n    for url
  in \"${urls[@]}\"; do\n      commands=(\n        \"curl -f --ipv4 --compressed -Lo
  \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only
  --compression=auto -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n        \"curl
  -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget
  --inet4-only -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n      )\n
  \     for cmd in \"${commands[@]}\"; do\n        echo \"Attempting download with:
  ${cmd} {url}\"\n        if ! (${cmd} \"${url}\"); then\n          echo \"== Download
  failed with ${cmd} ==\"\n          continue\n        fi\n        if [[ -n \"${hash}\"
  ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n          echo \"== Hash validation
  of ${url} failed. Retrying. ==\"\n          rm -f \"${file}\"\n        else\n          if
  [[ -n \"${hash}\" ]]; then\n            echo \"== Downloaded ${url} (SHA1 = ${hash})
  ==\"\n          else\n            echo \"== Downloaded ${url} ==\"\n          fi\n
  \         return\n        fi\n      done\n    done\n\n    echo \"All downloads failed;
  sleeping before retrying\"\n    sleep 60\n  done\n}\n\nvalidate-hash() {\n  local
  -r file=\"$1\"\n  local -r expected=\"$2\"\n  local actual\n\n  actual=$(sha256sum
  ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\"
  ]]; then\n    echo \"== ${file} corrupted, hash ${actual} doesn't match expected
  ${expected} ==\"\n    return 1\n  fi\n}\n\nfunction split-commas() {\n  echo $1
  | tr \",\" \"\\n\"\n}\n\nfunction try-download-release() {\n  # TODO(zmerlynn):
  Now we REALLY have no excuse not to do the reboot\n  # optimization.\n\n  local
  -r nodeup_urls=( $(split-commas \"${NODEUP_URL}\") )\n  if [[ -n \"${NODEUP_HASH:-}\"
  ]]; then\n    local -r nodeup_hash=\"${NODEUP_HASH}\"\n  else\n  # TODO: Remove?\n
  \   echo \"Downloading sha256 (not found in env)\"\n    download-or-bust nodeup.sha256
  \"\" \"${nodeup_urls[@]/%/.sha256}\"\n    local -r nodeup_hash=$(cat nodeup.sha256)\n
  \ fi\n\n  echo \"Downloading nodeup (${nodeup_urls[@]})\"\n  download-or-bust nodeup
  \"${nodeup_hash}\" \"${nodeup_urls[@]}\"\n\n  chmod +x nodeup\n}\n\nfunction download-release()
  {\n  # In case of failure checking integrity of release, retry.\n  until try-download-release;
  do\n    sleep 15\n    echo \"Couldn't download release. Retrying...\"\n  done\n\n
  \ echo \"Running nodeup\"\n  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793\n
  \ ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml
  --v=8  )\n}\n\nfunction run-bootstrap-scripts() {\n\tcat ./bootstrap_scripts.txt
  | while read scripturl scripthash; do\n\t\ttry-run-bootstrap-script \"$scripthash\"
  \"$scripturl\"\n\tdone\n}\n\nfunction try-run-bootstrap-script() {\n\tlocal -r scripthash=\"$1\"\n\tlocal
  -r scripturls=( $(split-commas \"$2\") )\n\tlocal -r scriptname=\"${scripturls[0]##*/}\"\n\n\tif
  [[ -n \"${scripthash}\" ]]; then\n\t\tlocal -r scriptsha1=\"${scripthash}\"\n\telse\n\t\techo
  \"Downloading ${scriptname}.sha1 (not found in env)\"\n\t\tdownload-or-bust \"\"
  \"${scripturls[@]/%/.sha1}\"\n\t\tlocal -r scriptsha1=$(cat \"${scriptname}.sha1\")\n\tfi\n\n\techo
  \"Downloading ${scriptname} (${scripturls[@]})\"\n\tdownload-or-bust \"${scriptsha1}\"
  \"${scripturls[@]}\"\n\n\techo \"=== Running ${scriptname} ===\"\n\tchmod +x \"$scriptname\"\n\t./$scriptname\n\techo
  \"=== Completed ${scriptname} ===\"\n}\n\n####################################################################################\n\n/bin/systemd-machine-id-setup
  || echo \"failed to set up ensure machine-id configured\"\n\necho \"== nodeup node
  config starting ==\"\nensure-install-dir\n\ncat > bootstrap_scripts.txt << '__EOF_BOOTSTRAP_SCRIPTS'\n\n__EOF_BOOTSTRAP_SCRIPTS\n\ncat
  > cluster_spec.yaml << '__EOF_CLUSTER_SPEC'\ncloudConfig: null\ncontainerRuntime:
  docker\ncontainerd:\n  skipInstall: true\ndocker:\n  ipMasq: false\n  ipTables:
  false\n  logDriver: json-file\n  logLevel: warn\n  logOpt:\n  - max-size=10m\n  -
  max-file=5\n  storage: overlay2,overlay,aufs\n  version: 18.06.3\nkubeProxy:\n  clusterCIDR:
  100.96.0.0/11\n  cpuRequest: 100m\n  hostnameOverride: '@aws'\n  image: k8s.gcr.io/kube-proxy:v1.14.0\n
  \ logLevel: 2\nkubelet:\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n
  \ clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard:
  memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n
  \ featureGates:\n    ExperimentalCriticalPodAnnotation: \"true\"\n  hostnameOverride:
  '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginMTU:
  9001\n  networkPluginName: kubenet\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podInfraContainerImage:
  k8s.gcr.io/pause-amd64:3.0\n  podManifestPath: /etc/kubernetes/manifests\n\n__EOF_CLUSTER_SPEC\n\ncat
  > ig_spec.yaml << '__EOF_IG_SPEC'\nkubelet: null\nnodeLabels: null\ntaints: null\n\n__EOF_IG_SPEC\n\ncat
  > kube_env.yaml << '__EOF_KUBE_ENV'\nAssets:\n- c3b736fd0f003765c12d99f2c995a8369e6241f4@https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubelet\n-
  7e3a3ea663153f900cbd52900a39c91fa9f334be@https://storage.googleapis.com/kubernetes-release/release/v1.14.0/bin/linux/amd64/kubectl\n-
  52e9d2de8a5f927307d9397308735658ee44ab8d@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-plugins-amd64-v0.7.5.tgz\n-
  42b15a0a0a56531750bde3c7b08d0cf27c170c48@https://artifacts.k8s.io/binaries/kops/1.8.1/linux/amd64/utils.tar.gz,https://github.com/kubernetes/kops/releases/download/1.8.1/linux-amd64-utils.tar.gz,https://kubeupv2.s3.amazonaws.com/kops/1.8.1/linux/amd64/utils.tar.gz\nClusterName:
  complex.example.com\nConfigBase: memfs://clusters.example.com/complex.example.com\nInstanceGroupName:
  nodes\nTags:\n- _automatic_upgrades\n- _aws\nchannels:\n- memfs://clusters.example.com/complex.example.com/addons/bootstrap-channel.yaml\nprotokubeImage:\n
  \ hash: 0b1f26208f8f6cc02468368706d0236670fec8a2\n  name: protokube:1.8.1\n  sources:\n
  \ - https://artifacts.k8s.io/binaries/kops/1.8.1/images/protokube.tar.gz\n  - https://github.com/kubernetes/kops/releases/download/1.8.1/images-protokube.tar.gz\n
  \ - https://kubeupv2.s3.amazonaws.com/kops/1.8.1/images/protokube.tar.gz\n\n__EOF_KUBE_ENV\n\nrun-bootstrap-scripts\ndownload-release\necho
  \"== nodeup node config done ==\"\n"
