load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "autoscalinggroup.go",
        "autoscalinggroup_fitask.go",
        "block_device_mappings.go",
        "cloudformation.go",
        "convenience.go",
        "dhcp_options.go",
        "dhcpoptions_fitask.go",
        "dnsname.go",
        "dnsname_fitask.go",
        "dnszone.go",
        "dnszone_fitask.go",
        "ebsvolume.go",
        "ebsvolume_fitask.go",
        "elastic_ip.go",
        "elasticip_fitask.go",
        "iaminstanceprofile.go",
        "iaminstanceprofile_fitask.go",
        "iaminstanceprofilerole.go",
        "iaminstanceprofilerole_fitask.go",
        "iamrole.go",
        "iamrole_fitask.go",
        "iamrolepolicy.go",
        "iamrolepolicy_fitask.go",
        "instance.go",
        "instance_elasticip_attachment.go",
        "instance_volume_attachment.go",
        "internetgateway.go",
        "internetgateway_fitask.go",
        "launchconfiguration.go",
        "launchconfiguration_fitask.go",
        "load_balancer.go",
        "load_balancer_attachment.go",
        "loadbalancer_attributes.go",
        "loadbalancer_fitask.go",
        "loadbalancer_healthchecks.go",
        "loadbalancerattachment_fitask.go",
        "natgateway.go",
        "natgateway_fitask.go",
        "route.go",
        "route_fitask.go",
        "routetable.go",
        "routetable_fitask.go",
        "routetableassociation.go",
        "routetableassociation_fitask.go",
        "securitygroup.go",
        "securitygroup_fitask.go",
        "securitygrouprule.go",
        "securitygrouprule_fitask.go",
        "sshkey.go",
        "sshkey_fitask.go",
        "subnet.go",
        "subnet_fitask.go",
        "tags.go",
        "vpc.go",
        "vpc_dhcpoptions_association.go",
        "vpc_fitask.go",
        "vpcdhcpoptionsassociation_fitask.go",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/diff:go_default_library",
        "//pkg/featureflag:go_default_library",
        "//upup/pkg/fi:go_default_library",
        "//upup/pkg/fi/cloudup/awsup:go_default_library",
        "//upup/pkg/fi/cloudup/cloudformation:go_default_library",
        "//upup/pkg/fi/cloudup/terraform:go_default_library",
        "//upup/pkg/fi/utils:go_default_library",
        "@com_github_aws_aws_sdk_go//aws:go_default_library",
        "@com_github_aws_aws_sdk_go//aws/awserr:go_default_library",
        "@com_github_aws_aws_sdk_go//service/autoscaling:go_default_library",
        "@com_github_aws_aws_sdk_go//service/ec2:go_default_library",
        "@com_github_aws_aws_sdk_go//service/elb:go_default_library",
        "@com_github_aws_aws_sdk_go//service/iam:go_default_library",
        "@com_github_aws_aws_sdk_go//service/route53:go_default_library",
        "@com_github_golang_glog//:go_default_library",
        "@io_k8s_apimachinery//pkg/util/sets:go_default_library",
        "@io_k8s_apimachinery//pkg/util/validation/field:go_default_library",
        "@org_golang_x_crypto//ssh:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "elastic_ip_test.go",
        "securitygroup_test.go",
        "sshkey_test.go",
        "subnet_test.go",
        "vpc_test.go",
    ],
    library = ":go_default_library",
    deps = [
        "//cloudmock/aws/mockec2:go_default_library",
        "//upup/pkg/fi:go_default_library",
        "//upup/pkg/fi/cloudup/awsup:go_default_library",
        "@com_github_aws_aws_sdk_go//aws:go_default_library",
        "@com_github_aws_aws_sdk_go//service/ec2:go_default_library",
    ],
)
