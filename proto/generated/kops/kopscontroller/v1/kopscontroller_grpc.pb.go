// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kopscontroller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KopsControllerServiceClient is the client API for KopsControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KopsControllerServiceClient interface {
	// Finds addresses for well-known hosts (apiserver etc) without using DNS
	DiscoverHosts(ctx context.Context, in *DiscoverHostsRequest, opts ...grpc.CallOption) (KopsControllerService_DiscoverHostsClient, error)
}

type kopsControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKopsControllerServiceClient(cc grpc.ClientConnInterface) KopsControllerServiceClient {
	return &kopsControllerServiceClient{cc}
}

func (c *kopsControllerServiceClient) DiscoverHosts(ctx context.Context, in *DiscoverHostsRequest, opts ...grpc.CallOption) (KopsControllerService_DiscoverHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KopsControllerService_ServiceDesc.Streams[0], "/kops.kopscontroller.v1.KopsControllerService/DiscoverHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &kopsControllerServiceDiscoverHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KopsControllerService_DiscoverHostsClient interface {
	Recv() (*DiscoverHostsResponse, error)
	grpc.ClientStream
}

type kopsControllerServiceDiscoverHostsClient struct {
	grpc.ClientStream
}

func (x *kopsControllerServiceDiscoverHostsClient) Recv() (*DiscoverHostsResponse, error) {
	m := new(DiscoverHostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KopsControllerServiceServer is the server API for KopsControllerService service.
// All implementations must embed UnimplementedKopsControllerServiceServer
// for forward compatibility
type KopsControllerServiceServer interface {
	// Finds addresses for well-known hosts (apiserver etc) without using DNS
	DiscoverHosts(*DiscoverHostsRequest, KopsControllerService_DiscoverHostsServer) error
	mustEmbedUnimplementedKopsControllerServiceServer()
}

// UnimplementedKopsControllerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKopsControllerServiceServer struct {
}

func (UnimplementedKopsControllerServiceServer) DiscoverHosts(*DiscoverHostsRequest, KopsControllerService_DiscoverHostsServer) error {
	return status.Errorf(codes.Unimplemented, "method DiscoverHosts not implemented")
}
func (UnimplementedKopsControllerServiceServer) mustEmbedUnimplementedKopsControllerServiceServer() {}

// UnsafeKopsControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KopsControllerServiceServer will
// result in compilation errors.
type UnsafeKopsControllerServiceServer interface {
	mustEmbedUnimplementedKopsControllerServiceServer()
}

func RegisterKopsControllerServiceServer(s grpc.ServiceRegistrar, srv KopsControllerServiceServer) {
	s.RegisterService(&KopsControllerService_ServiceDesc, srv)
}

func _KopsControllerService_DiscoverHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiscoverHostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KopsControllerServiceServer).DiscoverHosts(m, &kopsControllerServiceDiscoverHostsServer{stream})
}

type KopsControllerService_DiscoverHostsServer interface {
	Send(*DiscoverHostsResponse) error
	grpc.ServerStream
}

type kopsControllerServiceDiscoverHostsServer struct {
	grpc.ServerStream
}

func (x *kopsControllerServiceDiscoverHostsServer) Send(m *DiscoverHostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KopsControllerService_ServiceDesc is the grpc.ServiceDesc for KopsControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KopsControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kops.kopscontroller.v1.KopsControllerService",
	HandlerType: (*KopsControllerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiscoverHosts",
			Handler:       _KopsControllerService_DiscoverHosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kops/kopscontroller/v1/kopscontroller.proto",
}
