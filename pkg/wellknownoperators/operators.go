/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package wellknownoperators

import (
	"bytes"
	"context"
	"fmt"
	"net/url"
	"os/exec"
	"path"
	"strings"

	"k8s.io/klog/v2"
	channelsapi "k8s.io/kops/channels/pkg/api"
	"k8s.io/kops/pkg/apis/kops"
	"k8s.io/kops/pkg/featureflag"
	"k8s.io/kops/pkg/kubemanifest"
	"k8s.io/kops/pkg/model/components"
	"k8s.io/kops/upup/pkg/fi"
	"k8s.io/kops/util/pkg/vfs"
)

type WellKnownAddon struct {
	Manifest []byte
	Spec     channelsapi.AddonSpec
}

type Builder struct {
	Cluster *kops.Cluster
}

func (b *Builder) Build() ([]*WellKnownAddon, kubemanifest.ObjectList, error) {
	ctx := context.TODO()

	if !featureflag.UseAddonOperators.Enabled() {
		return nil, nil, nil
	}

	var addons []*WellKnownAddon
	var crds kubemanifest.ObjectList

	if b.Cluster.Spec.KubeDNS != nil && b.Cluster.Spec.KubeDNS.Provider == "CoreDNS" {
		// TODO: Check that we haven't manually loaded a CoreDNS operator
		// TODO: Check that we haven't manually created a CoreDNS CRD

		key := "coredns.addons.x-k8s.io"
		version := "0.1.0-kops.1"
		id := ""

		location := path.Join("operators", key, version, "manifest.yaml")

		metadata := map[string]interface{}{
			"namespace": "kube-system",
			"name":      "coredns",
		}
		spec := map[string]interface{}{
			"dnsDomain": b.Cluster.Spec.KubeDNS.Domain,
			"dnsIP":     b.Cluster.Spec.KubeDNS.ServerIP,
		}

		cr := kubemanifest.NewObject(map[string]interface{}{
			"apiVersion": "addons.x-k8s.io/v1alpha1",
			"kind":       "CoreDNS",
			"metadata":   metadata,
			"spec":       spec,
		})

		var manifestBytes []byte

		inlineOperator := true
		if inlineOperator {
			image := "justinsb/coredns-operator:latest"

			var contextObjects kubemanifest.ObjectList
			contextObjects = append(contextObjects, cr)

			context, err := buildContextObjects(b.Cluster)
			if err != nil {
				return nil, nil, err
			}
			contextObjects = append(contextObjects, context...)

			contextYAML, err := contextObjects.ToYAML()
			if err != nil {
				return nil, nil, fmt.Errorf("error building yaml context: %w", err)
			}

			// Based on https://github.com/kubernetes-sigs/kustomize/blob/855ce1a8db6c2e9c05fb15e66d92dbfdd60de4f1/cmd/config/docs/api-conventions/functions-impl.md#example-function-usage
			args := []string{"docker", "run", "--rm",
				"--network=none",
				"--user", "nobody",
				"--security-opt=no-new-privileges",
				"-i", image}

			// TODO: get the dry-run command from an image label?
			args = append(args, "--dry-run")

			cmd := exec.CommandContext(ctx, args[0], args[1:]...)
			cmd.Stdin = bytes.NewBuffer(contextYAML)

			var stdout bytes.Buffer
			cmd.Stdout = &stdout
			var stderr bytes.Buffer
			cmd.Stderr = &stderr

			if err := cmd.Run(); err != nil {
				klog.Warningf("operator client-side expansion failed: %v", err)
				klog.Warningf("stdout: %v", stdout.String())
				klog.Warningf("stderr: %v", stderr.String())
				return nil, nil, fmt.Errorf("error running %q to expand manifest: %w", strings.Join(args, " "), err)
			}

			expanded, err := kubemanifest.LoadObjectsFrom(stdout.Bytes())
			if err != nil {
				return nil, nil, fmt.Errorf("failed to parse manifest generated by %q: %w", image, err)
			}
			klog.Infof("manifest generated by %q: %v", image, expanded)

			manifestBytes = stdout.Bytes()
		} else {
			channelURL, err := kops.ResolveChannel(b.Cluster.Spec.Channel)
			if err != nil {
				return nil, nil, fmt.Errorf("error resolving channel %q: %v", b.Cluster.Spec.Channel, err)
			}

			locationURL := channelURL.ResolveReference(&url.URL{Path: location}).String()

			manifestBytes, err = vfs.Context.ReadFile(locationURL)
			if err != nil {
				return nil, nil, fmt.Errorf("error reading operator manifest %q: %v", locationURL, err)
			}

			crds = append(crds, cr)
		}

		addon := &WellKnownAddon{
			Manifest: manifestBytes,
			Spec: channelsapi.AddonSpec{
				Name:     fi.String(key),
				Version:  fi.String(version),
				Selector: map[string]string{"k8s-addon": key},
				Manifest: fi.String(location),
				Id:       id,
			},
		}
		addons = append(addons, addon)

	}

	return addons, crds, nil
}

// buildContextObjects builds additional objects that will also be created.
// These objects are passed to the operator.
// Operators can use these to derive values (such as clusterIP from the kube-dns service).
func buildContextObjects(cluster *kops.Cluster) (kubemanifest.ObjectList, error) {
	var contextObjects kubemanifest.ObjectList

	{
		ip, err := components.WellKnownServiceIP(&cluster.Spec, 1)
		if err != nil {
			return nil, err
		}

		kubernetesService, err := buildService("default", "kubernetes", ip.String())
		if err != nil {
			return nil, err
		}
		contextObjects = append(contextObjects, kubernetesService)
	}

	{
		kubeDNSService, err := buildService("kube-system", "kube-dns", cluster.Spec.KubeDNS.ServerIP)
		if err != nil {
			return nil, err
		}
		contextObjects = append(contextObjects, kubeDNSService)
	}

	return contextObjects, nil
}

func buildService(namespace string, name string, clusterIP string) (*kubemanifest.Object, error) {
	metadata := map[string]interface{}{
		"namespace": namespace,
		"name":      name,
	}
	spec := map[string]interface{}{
		"clusterIP": clusterIP,
	}

	s := kubemanifest.NewObject(map[string]interface{}{
		"apiVersion": "v1",
		"kind":       "Service",
		"metadata":   metadata,
		"spec":       spec,
	})

	return s, nil
}
