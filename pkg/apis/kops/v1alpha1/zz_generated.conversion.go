// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1alpha1

import (
	kops "k8s.io/kops/pkg/apis/kops"
	conversion "k8s.io/kubernetes/pkg/conversion"
	runtime "k8s.io/kubernetes/pkg/runtime"
	unsafe "unsafe"
)

func init() {
	SchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(scheme *runtime.Scheme) error {
	return scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_CNINetworkingSpec_To_kops_CNINetworkingSpec,
		Convert_kops_CNINetworkingSpec_To_v1alpha1_CNINetworkingSpec,
		Convert_v1alpha1_ClassicNetworkingSpec_To_kops_ClassicNetworkingSpec,
		Convert_kops_ClassicNetworkingSpec_To_v1alpha1_ClassicNetworkingSpec,
		Convert_v1alpha1_Cluster_To_kops_Cluster,
		Convert_kops_Cluster_To_v1alpha1_Cluster,
		Convert_v1alpha1_ClusterList_To_kops_ClusterList,
		Convert_kops_ClusterList_To_v1alpha1_ClusterList,
		Convert_v1alpha1_ClusterSpec_To_kops_ClusterSpec,
		Convert_kops_ClusterSpec_To_v1alpha1_ClusterSpec,
		Convert_v1alpha1_DockerConfig_To_kops_DockerConfig,
		Convert_kops_DockerConfig_To_v1alpha1_DockerConfig,
		Convert_v1alpha1_EtcdClusterSpec_To_kops_EtcdClusterSpec,
		Convert_kops_EtcdClusterSpec_To_v1alpha1_EtcdClusterSpec,
		Convert_v1alpha1_EtcdMemberSpec_To_kops_EtcdMemberSpec,
		Convert_kops_EtcdMemberSpec_To_v1alpha1_EtcdMemberSpec,
		Convert_v1alpha1_ExternalNetworkingSpec_To_kops_ExternalNetworkingSpec,
		Convert_kops_ExternalNetworkingSpec_To_v1alpha1_ExternalNetworkingSpec,
		Convert_v1alpha1_Federation_To_kops_Federation,
		Convert_kops_Federation_To_v1alpha1_Federation,
		Convert_v1alpha1_FederationList_To_kops_FederationList,
		Convert_kops_FederationList_To_v1alpha1_FederationList,
		Convert_v1alpha1_FederationSpec_To_kops_FederationSpec,
		Convert_kops_FederationSpec_To_v1alpha1_FederationSpec,
		Convert_v1alpha1_InstanceGroup_To_kops_InstanceGroup,
		Convert_kops_InstanceGroup_To_v1alpha1_InstanceGroup,
		Convert_v1alpha1_InstanceGroupList_To_kops_InstanceGroupList,
		Convert_kops_InstanceGroupList_To_v1alpha1_InstanceGroupList,
		Convert_v1alpha1_InstanceGroupSpec_To_kops_InstanceGroupSpec,
		Convert_kops_InstanceGroupSpec_To_v1alpha1_InstanceGroupSpec,
		Convert_v1alpha1_KopeioNetworkingSpec_To_kops_KopeioNetworkingSpec,
		Convert_kops_KopeioNetworkingSpec_To_v1alpha1_KopeioNetworkingSpec,
		Convert_v1alpha1_KubeAPIServerConfig_To_kops_KubeAPIServerConfig,
		Convert_kops_KubeAPIServerConfig_To_v1alpha1_KubeAPIServerConfig,
		Convert_v1alpha1_KubeControllerManagerConfig_To_kops_KubeControllerManagerConfig,
		Convert_kops_KubeControllerManagerConfig_To_v1alpha1_KubeControllerManagerConfig,
		Convert_v1alpha1_KubeDNSConfig_To_kops_KubeDNSConfig,
		Convert_kops_KubeDNSConfig_To_v1alpha1_KubeDNSConfig,
		Convert_v1alpha1_KubeProxyConfig_To_kops_KubeProxyConfig,
		Convert_kops_KubeProxyConfig_To_v1alpha1_KubeProxyConfig,
		Convert_v1alpha1_KubeSchedulerConfig_To_kops_KubeSchedulerConfig,
		Convert_kops_KubeSchedulerConfig_To_v1alpha1_KubeSchedulerConfig,
		Convert_v1alpha1_KubeletConfigSpec_To_kops_KubeletConfigSpec,
		Convert_kops_KubeletConfigSpec_To_v1alpha1_KubeletConfigSpec,
		Convert_v1alpha1_KubenetNetworkingSpec_To_kops_KubenetNetworkingSpec,
		Convert_kops_KubenetNetworkingSpec_To_v1alpha1_KubenetNetworkingSpec,
		Convert_v1alpha1_LeaderElectionConfiguration_To_kops_LeaderElectionConfiguration,
		Convert_kops_LeaderElectionConfiguration_To_v1alpha1_LeaderElectionConfiguration,
		Convert_v1alpha1_NetworkingSpec_To_kops_NetworkingSpec,
		Convert_kops_NetworkingSpec_To_v1alpha1_NetworkingSpec,
		Convert_v1alpha1_WeaveNetworkingSpec_To_kops_WeaveNetworkingSpec,
		Convert_kops_WeaveNetworkingSpec_To_v1alpha1_WeaveNetworkingSpec,
	)
}

func autoConvert_v1alpha1_CNINetworkingSpec_To_kops_CNINetworkingSpec(in *CNINetworkingSpec, out *kops.CNINetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_CNINetworkingSpec_To_kops_CNINetworkingSpec(in *CNINetworkingSpec, out *kops.CNINetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_CNINetworkingSpec_To_kops_CNINetworkingSpec(in, out, s)
}

func autoConvert_kops_CNINetworkingSpec_To_v1alpha1_CNINetworkingSpec(in *kops.CNINetworkingSpec, out *CNINetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_CNINetworkingSpec_To_v1alpha1_CNINetworkingSpec(in *kops.CNINetworkingSpec, out *CNINetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_CNINetworkingSpec_To_v1alpha1_CNINetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_ClassicNetworkingSpec_To_kops_ClassicNetworkingSpec(in *ClassicNetworkingSpec, out *kops.ClassicNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_ClassicNetworkingSpec_To_kops_ClassicNetworkingSpec(in *ClassicNetworkingSpec, out *kops.ClassicNetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClassicNetworkingSpec_To_kops_ClassicNetworkingSpec(in, out, s)
}

func autoConvert_kops_ClassicNetworkingSpec_To_v1alpha1_ClassicNetworkingSpec(in *kops.ClassicNetworkingSpec, out *ClassicNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_ClassicNetworkingSpec_To_v1alpha1_ClassicNetworkingSpec(in *kops.ClassicNetworkingSpec, out *ClassicNetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_ClassicNetworkingSpec_To_v1alpha1_ClassicNetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_Cluster_To_kops_Cluster(in *Cluster, out *kops.Cluster, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ClusterSpec_To_kops_ClusterSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_Cluster_To_kops_Cluster(in *Cluster, out *kops.Cluster, s conversion.Scope) error {
	return autoConvert_v1alpha1_Cluster_To_kops_Cluster(in, out, s)
}

func autoConvert_kops_Cluster_To_v1alpha1_Cluster(in *kops.Cluster, out *Cluster, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_kops_ClusterSpec_To_v1alpha1_ClusterSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_kops_Cluster_To_v1alpha1_Cluster(in *kops.Cluster, out *Cluster, s conversion.Scope) error {
	return autoConvert_kops_Cluster_To_v1alpha1_Cluster(in, out, s)
}

func autoConvert_v1alpha1_ClusterList_To_kops_ClusterList(in *ClusterList, out *kops.ClusterList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]kops.Cluster, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Cluster_To_kops_Cluster(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_ClusterList_To_kops_ClusterList(in *ClusterList, out *kops.ClusterList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterList_To_kops_ClusterList(in, out, s)
}

func autoConvert_kops_ClusterList_To_v1alpha1_ClusterList(in *kops.ClusterList, out *ClusterList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			if err := Convert_kops_Cluster_To_v1alpha1_Cluster(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_kops_ClusterList_To_v1alpha1_ClusterList(in *kops.ClusterList, out *ClusterList, s conversion.Scope) error {
	return autoConvert_kops_ClusterList_To_v1alpha1_ClusterList(in, out, s)
}

func autoConvert_v1alpha1_ClusterSpec_To_kops_ClusterSpec(in *ClusterSpec, out *kops.ClusterSpec, s conversion.Scope) error {
	out.Channel = in.Channel
	out.ConfigBase = in.ConfigBase
	out.CloudProvider = in.CloudProvider
	out.KubernetesVersion = in.KubernetesVersion
	// WARNING: in.Zones requires manual conversion: does not exist in peer-type
	out.Project = in.Project
	out.MasterPublicName = in.MasterPublicName
	out.MasterInternalName = in.MasterInternalName
	out.NetworkCIDR = in.NetworkCIDR
	out.NetworkID = in.NetworkID
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(kops.TopologySpec)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.SecretStore = in.SecretStore
	out.KeyStore = in.KeyStore
	out.ConfigStore = in.ConfigStore
	out.DNSZone = in.DNSZone
	out.ClusterDNSDomain = in.ClusterDNSDomain
	// WARNING: in.Multizone requires manual conversion: does not exist in peer-type
	out.ServiceClusterIPRange = in.ServiceClusterIPRange
	out.NonMasqueradeCIDR = in.NonMasqueradeCIDR
	// WARNING: in.AdminAccess requires manual conversion: does not exist in peer-type
	out.IsolateMasters = (*bool)(unsafe.Pointer(in.IsolateMasters))
	out.UpdatePolicy = (*string)(unsafe.Pointer(in.UpdatePolicy))
	out.EtcdClusters = *(*[]*kops.EtcdClusterSpec)(unsafe.Pointer(&in.EtcdClusters))
	out.Docker = (*kops.DockerConfig)(unsafe.Pointer(in.Docker))
	out.KubeDNS = (*kops.KubeDNSConfig)(unsafe.Pointer(in.KubeDNS))
	out.KubeAPIServer = (*kops.KubeAPIServerConfig)(unsafe.Pointer(in.KubeAPIServer))
	out.KubeControllerManager = (*kops.KubeControllerManagerConfig)(unsafe.Pointer(in.KubeControllerManager))
	out.KubeScheduler = (*kops.KubeSchedulerConfig)(unsafe.Pointer(in.KubeScheduler))
	out.KubeProxy = (*kops.KubeProxyConfig)(unsafe.Pointer(in.KubeProxy))
	out.Kubelet = (*kops.KubeletConfigSpec)(unsafe.Pointer(in.Kubelet))
	out.MasterKubelet = (*kops.KubeletConfigSpec)(unsafe.Pointer(in.MasterKubelet))
	out.Networking = (*kops.NetworkingSpec)(unsafe.Pointer(in.Networking))
	return nil
}

func autoConvert_kops_ClusterSpec_To_v1alpha1_ClusterSpec(in *kops.ClusterSpec, out *ClusterSpec, s conversion.Scope) error {
	out.Channel = in.Channel
	out.ConfigBase = in.ConfigBase
	out.CloudProvider = in.CloudProvider
	out.KubernetesVersion = in.KubernetesVersion
	// WARNING: in.Subnets requires manual conversion: does not exist in peer-type
	out.Project = in.Project
	out.MasterPublicName = in.MasterPublicName
	out.MasterInternalName = in.MasterInternalName
	out.NetworkCIDR = in.NetworkCIDR
	out.NetworkID = in.NetworkID
	if in.Topology != nil {
		in, out := &in.Topology, &out.Topology
		*out = new(TopologySpec)
		// TODO: Inefficient conversion - can we improve it?
		if err := s.Convert(*in, *out, 0); err != nil {
			return err
		}
	} else {
		out.Topology = nil
	}
	out.SecretStore = in.SecretStore
	out.KeyStore = in.KeyStore
	out.ConfigStore = in.ConfigStore
	out.DNSZone = in.DNSZone
	out.ClusterDNSDomain = in.ClusterDNSDomain
	out.ServiceClusterIPRange = in.ServiceClusterIPRange
	out.NonMasqueradeCIDR = in.NonMasqueradeCIDR
	// WARNING: in.SSHAccess requires manual conversion: does not exist in peer-type
	// WARNING: in.APIAccess requires manual conversion: does not exist in peer-type
	out.IsolateMasters = (*bool)(unsafe.Pointer(in.IsolateMasters))
	out.UpdatePolicy = (*string)(unsafe.Pointer(in.UpdatePolicy))
	out.EtcdClusters = *(*[]*EtcdClusterSpec)(unsafe.Pointer(&in.EtcdClusters))
	out.Docker = (*DockerConfig)(unsafe.Pointer(in.Docker))
	out.KubeDNS = (*KubeDNSConfig)(unsafe.Pointer(in.KubeDNS))
	out.KubeAPIServer = (*KubeAPIServerConfig)(unsafe.Pointer(in.KubeAPIServer))
	out.KubeControllerManager = (*KubeControllerManagerConfig)(unsafe.Pointer(in.KubeControllerManager))
	out.KubeScheduler = (*KubeSchedulerConfig)(unsafe.Pointer(in.KubeScheduler))
	out.KubeProxy = (*KubeProxyConfig)(unsafe.Pointer(in.KubeProxy))
	out.Kubelet = (*KubeletConfigSpec)(unsafe.Pointer(in.Kubelet))
	out.MasterKubelet = (*KubeletConfigSpec)(unsafe.Pointer(in.MasterKubelet))
	out.Networking = (*NetworkingSpec)(unsafe.Pointer(in.Networking))
	return nil
}

func autoConvert_v1alpha1_DockerConfig_To_kops_DockerConfig(in *DockerConfig, out *kops.DockerConfig, s conversion.Scope) error {
	out.Bridge = (*string)(unsafe.Pointer(in.Bridge))
	out.LogLevel = (*string)(unsafe.Pointer(in.LogLevel))
	out.IPTables = (*bool)(unsafe.Pointer(in.IPTables))
	out.IPMasq = (*bool)(unsafe.Pointer(in.IPMasq))
	out.Storage = (*string)(unsafe.Pointer(in.Storage))
	out.InsecureRegistry = (*string)(unsafe.Pointer(in.InsecureRegistry))
	out.MTU = (*int)(unsafe.Pointer(in.MTU))
	return nil
}

func Convert_v1alpha1_DockerConfig_To_kops_DockerConfig(in *DockerConfig, out *kops.DockerConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_DockerConfig_To_kops_DockerConfig(in, out, s)
}

func autoConvert_kops_DockerConfig_To_v1alpha1_DockerConfig(in *kops.DockerConfig, out *DockerConfig, s conversion.Scope) error {
	out.Bridge = (*string)(unsafe.Pointer(in.Bridge))
	out.LogLevel = (*string)(unsafe.Pointer(in.LogLevel))
	out.IPTables = (*bool)(unsafe.Pointer(in.IPTables))
	out.IPMasq = (*bool)(unsafe.Pointer(in.IPMasq))
	out.Storage = (*string)(unsafe.Pointer(in.Storage))
	out.InsecureRegistry = (*string)(unsafe.Pointer(in.InsecureRegistry))
	out.MTU = (*int)(unsafe.Pointer(in.MTU))
	return nil
}

func Convert_kops_DockerConfig_To_v1alpha1_DockerConfig(in *kops.DockerConfig, out *DockerConfig, s conversion.Scope) error {
	return autoConvert_kops_DockerConfig_To_v1alpha1_DockerConfig(in, out, s)
}

func autoConvert_v1alpha1_EtcdClusterSpec_To_kops_EtcdClusterSpec(in *EtcdClusterSpec, out *kops.EtcdClusterSpec, s conversion.Scope) error {
	out.Name = in.Name
	out.Members = *(*[]*kops.EtcdMemberSpec)(unsafe.Pointer(&in.Members))
	return nil
}

func Convert_v1alpha1_EtcdClusterSpec_To_kops_EtcdClusterSpec(in *EtcdClusterSpec, out *kops.EtcdClusterSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_EtcdClusterSpec_To_kops_EtcdClusterSpec(in, out, s)
}

func autoConvert_kops_EtcdClusterSpec_To_v1alpha1_EtcdClusterSpec(in *kops.EtcdClusterSpec, out *EtcdClusterSpec, s conversion.Scope) error {
	out.Name = in.Name
	out.Members = *(*[]*EtcdMemberSpec)(unsafe.Pointer(&in.Members))
	return nil
}

func Convert_kops_EtcdClusterSpec_To_v1alpha1_EtcdClusterSpec(in *kops.EtcdClusterSpec, out *EtcdClusterSpec, s conversion.Scope) error {
	return autoConvert_kops_EtcdClusterSpec_To_v1alpha1_EtcdClusterSpec(in, out, s)
}

func autoConvert_v1alpha1_EtcdMemberSpec_To_kops_EtcdMemberSpec(in *EtcdMemberSpec, out *kops.EtcdMemberSpec, s conversion.Scope) error {
	out.Name = in.Name
	// WARNING: in.Zone requires manual conversion: does not exist in peer-type
	out.VolumeType = (*string)(unsafe.Pointer(in.VolumeType))
	out.VolumeSize = (*int)(unsafe.Pointer(in.VolumeSize))
	out.KmsKeyId = (*string)(unsafe.Pointer(in.KmsKeyId))
	out.EncryptedVolume = (*bool)(unsafe.Pointer(in.EncryptedVolume))
	return nil
}

func autoConvert_kops_EtcdMemberSpec_To_v1alpha1_EtcdMemberSpec(in *kops.EtcdMemberSpec, out *EtcdMemberSpec, s conversion.Scope) error {
	out.Name = in.Name
	// WARNING: in.InstanceGroup requires manual conversion: does not exist in peer-type
	out.VolumeType = (*string)(unsafe.Pointer(in.VolumeType))
	out.VolumeSize = (*int)(unsafe.Pointer(in.VolumeSize))
	out.KmsKeyId = (*string)(unsafe.Pointer(in.KmsKeyId))
	out.EncryptedVolume = (*bool)(unsafe.Pointer(in.EncryptedVolume))
	return nil
}

func autoConvert_v1alpha1_ExternalNetworkingSpec_To_kops_ExternalNetworkingSpec(in *ExternalNetworkingSpec, out *kops.ExternalNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_ExternalNetworkingSpec_To_kops_ExternalNetworkingSpec(in *ExternalNetworkingSpec, out *kops.ExternalNetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ExternalNetworkingSpec_To_kops_ExternalNetworkingSpec(in, out, s)
}

func autoConvert_kops_ExternalNetworkingSpec_To_v1alpha1_ExternalNetworkingSpec(in *kops.ExternalNetworkingSpec, out *ExternalNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_ExternalNetworkingSpec_To_v1alpha1_ExternalNetworkingSpec(in *kops.ExternalNetworkingSpec, out *ExternalNetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_ExternalNetworkingSpec_To_v1alpha1_ExternalNetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_Federation_To_kops_Federation(in *Federation, out *kops.Federation, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_FederationSpec_To_kops_FederationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_Federation_To_kops_Federation(in *Federation, out *kops.Federation, s conversion.Scope) error {
	return autoConvert_v1alpha1_Federation_To_kops_Federation(in, out, s)
}

func autoConvert_kops_Federation_To_v1alpha1_Federation(in *kops.Federation, out *Federation, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_kops_FederationSpec_To_v1alpha1_FederationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_kops_Federation_To_v1alpha1_Federation(in *kops.Federation, out *Federation, s conversion.Scope) error {
	return autoConvert_kops_Federation_To_v1alpha1_Federation(in, out, s)
}

func autoConvert_v1alpha1_FederationList_To_kops_FederationList(in *FederationList, out *kops.FederationList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]kops.Federation)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_v1alpha1_FederationList_To_kops_FederationList(in *FederationList, out *kops.FederationList, s conversion.Scope) error {
	return autoConvert_v1alpha1_FederationList_To_kops_FederationList(in, out, s)
}

func autoConvert_kops_FederationList_To_v1alpha1_FederationList(in *kops.FederationList, out *FederationList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]Federation)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_kops_FederationList_To_v1alpha1_FederationList(in *kops.FederationList, out *FederationList, s conversion.Scope) error {
	return autoConvert_kops_FederationList_To_v1alpha1_FederationList(in, out, s)
}

func autoConvert_v1alpha1_FederationSpec_To_kops_FederationSpec(in *FederationSpec, out *kops.FederationSpec, s conversion.Scope) error {
	out.Controllers = *(*[]string)(unsafe.Pointer(&in.Controllers))
	out.Members = *(*[]string)(unsafe.Pointer(&in.Members))
	out.DNSName = in.DNSName
	return nil
}

func Convert_v1alpha1_FederationSpec_To_kops_FederationSpec(in *FederationSpec, out *kops.FederationSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_FederationSpec_To_kops_FederationSpec(in, out, s)
}

func autoConvert_kops_FederationSpec_To_v1alpha1_FederationSpec(in *kops.FederationSpec, out *FederationSpec, s conversion.Scope) error {
	out.Controllers = *(*[]string)(unsafe.Pointer(&in.Controllers))
	out.Members = *(*[]string)(unsafe.Pointer(&in.Members))
	out.DNSName = in.DNSName
	return nil
}

func Convert_kops_FederationSpec_To_v1alpha1_FederationSpec(in *kops.FederationSpec, out *FederationSpec, s conversion.Scope) error {
	return autoConvert_kops_FederationSpec_To_v1alpha1_FederationSpec(in, out, s)
}

func autoConvert_v1alpha1_InstanceGroup_To_kops_InstanceGroup(in *InstanceGroup, out *kops.InstanceGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_InstanceGroupSpec_To_kops_InstanceGroupSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_InstanceGroup_To_kops_InstanceGroup(in *InstanceGroup, out *kops.InstanceGroup, s conversion.Scope) error {
	return autoConvert_v1alpha1_InstanceGroup_To_kops_InstanceGroup(in, out, s)
}

func autoConvert_kops_InstanceGroup_To_v1alpha1_InstanceGroup(in *kops.InstanceGroup, out *InstanceGroup, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_kops_InstanceGroupSpec_To_v1alpha1_InstanceGroupSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

func Convert_kops_InstanceGroup_To_v1alpha1_InstanceGroup(in *kops.InstanceGroup, out *InstanceGroup, s conversion.Scope) error {
	return autoConvert_kops_InstanceGroup_To_v1alpha1_InstanceGroup(in, out, s)
}

func autoConvert_v1alpha1_InstanceGroupList_To_kops_InstanceGroupList(in *InstanceGroupList, out *kops.InstanceGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]kops.InstanceGroup)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_v1alpha1_InstanceGroupList_To_kops_InstanceGroupList(in *InstanceGroupList, out *kops.InstanceGroupList, s conversion.Scope) error {
	return autoConvert_v1alpha1_InstanceGroupList_To_kops_InstanceGroupList(in, out, s)
}

func autoConvert_kops_InstanceGroupList_To_v1alpha1_InstanceGroupList(in *kops.InstanceGroupList, out *InstanceGroupList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]InstanceGroup)(unsafe.Pointer(&in.Items))
	return nil
}

func Convert_kops_InstanceGroupList_To_v1alpha1_InstanceGroupList(in *kops.InstanceGroupList, out *InstanceGroupList, s conversion.Scope) error {
	return autoConvert_kops_InstanceGroupList_To_v1alpha1_InstanceGroupList(in, out, s)
}

func autoConvert_v1alpha1_InstanceGroupSpec_To_kops_InstanceGroupSpec(in *InstanceGroupSpec, out *kops.InstanceGroupSpec, s conversion.Scope) error {
	out.Role = kops.InstanceGroupRole(in.Role)
	out.Image = in.Image
	out.MinSize = (*int)(unsafe.Pointer(in.MinSize))
	out.MaxSize = (*int)(unsafe.Pointer(in.MaxSize))
	out.MachineType = in.MachineType
	out.RootVolumeSize = (*int)(unsafe.Pointer(in.RootVolumeSize))
	out.RootVolumeType = (*string)(unsafe.Pointer(in.RootVolumeType))
	// WARNING: in.Zones requires manual conversion: does not exist in peer-type
	out.MaxPrice = (*string)(unsafe.Pointer(in.MaxPrice))
	out.AssociatePublicIP = (*bool)(unsafe.Pointer(in.AssociatePublicIP))
	out.CloudLabels = *(*map[string]string)(unsafe.Pointer(&in.CloudLabels))
	out.NodeLabels = *(*map[string]string)(unsafe.Pointer(&in.NodeLabels))
	return nil
}

func autoConvert_kops_InstanceGroupSpec_To_v1alpha1_InstanceGroupSpec(in *kops.InstanceGroupSpec, out *InstanceGroupSpec, s conversion.Scope) error {
	out.Role = InstanceGroupRole(in.Role)
	out.Image = in.Image
	out.MinSize = (*int)(unsafe.Pointer(in.MinSize))
	out.MaxSize = (*int)(unsafe.Pointer(in.MaxSize))
	out.MachineType = in.MachineType
	out.RootVolumeSize = (*int)(unsafe.Pointer(in.RootVolumeSize))
	out.RootVolumeType = (*string)(unsafe.Pointer(in.RootVolumeType))
	// WARNING: in.Subnets requires manual conversion: does not exist in peer-type
	out.MaxPrice = (*string)(unsafe.Pointer(in.MaxPrice))
	out.AssociatePublicIP = (*bool)(unsafe.Pointer(in.AssociatePublicIP))
	out.CloudLabels = *(*map[string]string)(unsafe.Pointer(&in.CloudLabels))
	out.NodeLabels = *(*map[string]string)(unsafe.Pointer(&in.NodeLabels))
	return nil
}

func autoConvert_v1alpha1_KopeioNetworkingSpec_To_kops_KopeioNetworkingSpec(in *KopeioNetworkingSpec, out *kops.KopeioNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_KopeioNetworkingSpec_To_kops_KopeioNetworkingSpec(in *KopeioNetworkingSpec, out *kops.KopeioNetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_KopeioNetworkingSpec_To_kops_KopeioNetworkingSpec(in, out, s)
}

func autoConvert_kops_KopeioNetworkingSpec_To_v1alpha1_KopeioNetworkingSpec(in *kops.KopeioNetworkingSpec, out *KopeioNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_KopeioNetworkingSpec_To_v1alpha1_KopeioNetworkingSpec(in *kops.KopeioNetworkingSpec, out *KopeioNetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_KopeioNetworkingSpec_To_v1alpha1_KopeioNetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_KubeAPIServerConfig_To_kops_KubeAPIServerConfig(in *KubeAPIServerConfig, out *kops.KubeAPIServerConfig, s conversion.Scope) error {
	out.PathSrvKubernetes = in.PathSrvKubernetes
	out.PathSrvSshproxy = in.PathSrvSshproxy
	out.Image = in.Image
	out.LogLevel = in.LogLevel
	out.CloudProvider = in.CloudProvider
	out.SecurePort = in.SecurePort
	out.Address = in.Address
	out.EtcdServers = *(*[]string)(unsafe.Pointer(&in.EtcdServers))
	out.EtcdServersOverrides = *(*[]string)(unsafe.Pointer(&in.EtcdServersOverrides))
	out.AdmissionControl = *(*[]string)(unsafe.Pointer(&in.AdmissionControl))
	out.ServiceClusterIPRange = in.ServiceClusterIPRange
	out.ClientCAFile = in.ClientCAFile
	out.BasicAuthFile = in.BasicAuthFile
	out.TLSCertFile = in.TLSCertFile
	out.TLSPrivateKeyFile = in.TLSPrivateKeyFile
	out.TokenAuthFile = in.TokenAuthFile
	out.AllowPrivileged = (*bool)(unsafe.Pointer(in.AllowPrivileged))
	out.APIServerCount = (*int)(unsafe.Pointer(in.APIServerCount))
	out.RuntimeConfig = *(*map[string]string)(unsafe.Pointer(&in.RuntimeConfig))
	return nil
}

func Convert_v1alpha1_KubeAPIServerConfig_To_kops_KubeAPIServerConfig(in *KubeAPIServerConfig, out *kops.KubeAPIServerConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeAPIServerConfig_To_kops_KubeAPIServerConfig(in, out, s)
}

func autoConvert_kops_KubeAPIServerConfig_To_v1alpha1_KubeAPIServerConfig(in *kops.KubeAPIServerConfig, out *KubeAPIServerConfig, s conversion.Scope) error {
	out.PathSrvKubernetes = in.PathSrvKubernetes
	out.PathSrvSshproxy = in.PathSrvSshproxy
	out.Image = in.Image
	out.LogLevel = in.LogLevel
	out.CloudProvider = in.CloudProvider
	out.SecurePort = in.SecurePort
	out.Address = in.Address
	out.EtcdServers = *(*[]string)(unsafe.Pointer(&in.EtcdServers))
	out.EtcdServersOverrides = *(*[]string)(unsafe.Pointer(&in.EtcdServersOverrides))
	out.AdmissionControl = *(*[]string)(unsafe.Pointer(&in.AdmissionControl))
	out.ServiceClusterIPRange = in.ServiceClusterIPRange
	out.ClientCAFile = in.ClientCAFile
	out.BasicAuthFile = in.BasicAuthFile
	out.TLSCertFile = in.TLSCertFile
	out.TLSPrivateKeyFile = in.TLSPrivateKeyFile
	out.TokenAuthFile = in.TokenAuthFile
	out.AllowPrivileged = (*bool)(unsafe.Pointer(in.AllowPrivileged))
	out.APIServerCount = (*int)(unsafe.Pointer(in.APIServerCount))
	out.RuntimeConfig = *(*map[string]string)(unsafe.Pointer(&in.RuntimeConfig))
	return nil
}

func Convert_kops_KubeAPIServerConfig_To_v1alpha1_KubeAPIServerConfig(in *kops.KubeAPIServerConfig, out *KubeAPIServerConfig, s conversion.Scope) error {
	return autoConvert_kops_KubeAPIServerConfig_To_v1alpha1_KubeAPIServerConfig(in, out, s)
}

func autoConvert_v1alpha1_KubeControllerManagerConfig_To_kops_KubeControllerManagerConfig(in *KubeControllerManagerConfig, out *kops.KubeControllerManagerConfig, s conversion.Scope) error {
	out.Master = in.Master
	out.LogLevel = in.LogLevel
	out.ServiceAccountPrivateKeyFile = in.ServiceAccountPrivateKeyFile
	out.Image = in.Image
	out.PathSrvKubernetes = in.PathSrvKubernetes
	out.CloudProvider = in.CloudProvider
	out.ClusterName = in.ClusterName
	out.ClusterCIDR = in.ClusterCIDR
	out.AllocateNodeCIDRs = (*bool)(unsafe.Pointer(in.AllocateNodeCIDRs))
	out.ConfigureCloudRoutes = (*bool)(unsafe.Pointer(in.ConfigureCloudRoutes))
	out.RootCAFile = in.RootCAFile
	out.LeaderElection = (*kops.LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	return nil
}

func Convert_v1alpha1_KubeControllerManagerConfig_To_kops_KubeControllerManagerConfig(in *KubeControllerManagerConfig, out *kops.KubeControllerManagerConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeControllerManagerConfig_To_kops_KubeControllerManagerConfig(in, out, s)
}

func autoConvert_kops_KubeControllerManagerConfig_To_v1alpha1_KubeControllerManagerConfig(in *kops.KubeControllerManagerConfig, out *KubeControllerManagerConfig, s conversion.Scope) error {
	out.Master = in.Master
	out.LogLevel = in.LogLevel
	out.ServiceAccountPrivateKeyFile = in.ServiceAccountPrivateKeyFile
	out.Image = in.Image
	out.PathSrvKubernetes = in.PathSrvKubernetes
	out.CloudProvider = in.CloudProvider
	out.ClusterName = in.ClusterName
	out.ClusterCIDR = in.ClusterCIDR
	out.AllocateNodeCIDRs = (*bool)(unsafe.Pointer(in.AllocateNodeCIDRs))
	out.ConfigureCloudRoutes = (*bool)(unsafe.Pointer(in.ConfigureCloudRoutes))
	out.RootCAFile = in.RootCAFile
	out.LeaderElection = (*LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	return nil
}

func Convert_kops_KubeControllerManagerConfig_To_v1alpha1_KubeControllerManagerConfig(in *kops.KubeControllerManagerConfig, out *KubeControllerManagerConfig, s conversion.Scope) error {
	return autoConvert_kops_KubeControllerManagerConfig_To_v1alpha1_KubeControllerManagerConfig(in, out, s)
}

func autoConvert_v1alpha1_KubeDNSConfig_To_kops_KubeDNSConfig(in *KubeDNSConfig, out *kops.KubeDNSConfig, s conversion.Scope) error {
	out.Image = in.Image
	out.Replicas = in.Replicas
	out.Domain = in.Domain
	out.ServerIP = in.ServerIP
	return nil
}

func Convert_v1alpha1_KubeDNSConfig_To_kops_KubeDNSConfig(in *KubeDNSConfig, out *kops.KubeDNSConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeDNSConfig_To_kops_KubeDNSConfig(in, out, s)
}

func autoConvert_kops_KubeDNSConfig_To_v1alpha1_KubeDNSConfig(in *kops.KubeDNSConfig, out *KubeDNSConfig, s conversion.Scope) error {
	out.Image = in.Image
	out.Replicas = in.Replicas
	out.Domain = in.Domain
	out.ServerIP = in.ServerIP
	return nil
}

func Convert_kops_KubeDNSConfig_To_v1alpha1_KubeDNSConfig(in *kops.KubeDNSConfig, out *KubeDNSConfig, s conversion.Scope) error {
	return autoConvert_kops_KubeDNSConfig_To_v1alpha1_KubeDNSConfig(in, out, s)
}

func autoConvert_v1alpha1_KubeProxyConfig_To_kops_KubeProxyConfig(in *KubeProxyConfig, out *kops.KubeProxyConfig, s conversion.Scope) error {
	out.Image = in.Image
	out.CPURequest = in.CPURequest
	out.LogLevel = in.LogLevel
	out.Master = in.Master
	return nil
}

func Convert_v1alpha1_KubeProxyConfig_To_kops_KubeProxyConfig(in *KubeProxyConfig, out *kops.KubeProxyConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeProxyConfig_To_kops_KubeProxyConfig(in, out, s)
}

func autoConvert_kops_KubeProxyConfig_To_v1alpha1_KubeProxyConfig(in *kops.KubeProxyConfig, out *KubeProxyConfig, s conversion.Scope) error {
	out.Image = in.Image
	out.CPURequest = in.CPURequest
	out.LogLevel = in.LogLevel
	out.Master = in.Master
	return nil
}

func Convert_kops_KubeProxyConfig_To_v1alpha1_KubeProxyConfig(in *kops.KubeProxyConfig, out *KubeProxyConfig, s conversion.Scope) error {
	return autoConvert_kops_KubeProxyConfig_To_v1alpha1_KubeProxyConfig(in, out, s)
}

func autoConvert_v1alpha1_KubeSchedulerConfig_To_kops_KubeSchedulerConfig(in *KubeSchedulerConfig, out *kops.KubeSchedulerConfig, s conversion.Scope) error {
	out.Master = in.Master
	out.LogLevel = in.LogLevel
	out.Image = in.Image
	out.LeaderElection = (*kops.LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	return nil
}

func Convert_v1alpha1_KubeSchedulerConfig_To_kops_KubeSchedulerConfig(in *KubeSchedulerConfig, out *kops.KubeSchedulerConfig, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeSchedulerConfig_To_kops_KubeSchedulerConfig(in, out, s)
}

func autoConvert_kops_KubeSchedulerConfig_To_v1alpha1_KubeSchedulerConfig(in *kops.KubeSchedulerConfig, out *KubeSchedulerConfig, s conversion.Scope) error {
	out.Master = in.Master
	out.LogLevel = in.LogLevel
	out.Image = in.Image
	out.LeaderElection = (*LeaderElectionConfiguration)(unsafe.Pointer(in.LeaderElection))
	return nil
}

func Convert_kops_KubeSchedulerConfig_To_v1alpha1_KubeSchedulerConfig(in *kops.KubeSchedulerConfig, out *KubeSchedulerConfig, s conversion.Scope) error {
	return autoConvert_kops_KubeSchedulerConfig_To_v1alpha1_KubeSchedulerConfig(in, out, s)
}

func autoConvert_v1alpha1_KubeletConfigSpec_To_kops_KubeletConfigSpec(in *KubeletConfigSpec, out *kops.KubeletConfigSpec, s conversion.Scope) error {
	out.APIServers = in.APIServers
	out.LogLevel = (*int)(unsafe.Pointer(in.LogLevel))
	out.Config = in.Config
	out.HostnameOverride = in.HostnameOverride
	out.AllowPrivileged = (*bool)(unsafe.Pointer(in.AllowPrivileged))
	out.EnableDebuggingHandlers = (*bool)(unsafe.Pointer(in.EnableDebuggingHandlers))
	out.ClusterDomain = in.ClusterDomain
	out.ClusterDNS = in.ClusterDNS
	out.NetworkPluginName = in.NetworkPluginName
	out.CloudProvider = in.CloudProvider
	out.KubeletCgroups = in.KubeletCgroups
	out.RuntimeCgroups = in.RuntimeCgroups
	out.SystemCgroups = in.SystemCgroups
	out.CgroupRoot = in.CgroupRoot
	out.ConfigureCBR0 = (*bool)(unsafe.Pointer(in.ConfigureCBR0))
	out.HairpinMode = in.HairpinMode
	out.BabysitDaemons = (*bool)(unsafe.Pointer(in.BabysitDaemons))
	out.PodCIDR = in.PodCIDR
	out.ReconcileCIDR = (*bool)(unsafe.Pointer(in.ReconcileCIDR))
	out.RegisterSchedulable = (*bool)(unsafe.Pointer(in.RegisterSchedulable))
	out.NodeLabels = *(*map[string]string)(unsafe.Pointer(&in.NodeLabels))
	out.NonMasqueradeCIDR = in.NonMasqueradeCIDR
	out.NetworkPluginMTU = (*int32)(unsafe.Pointer(in.NetworkPluginMTU))
	return nil
}

func Convert_v1alpha1_KubeletConfigSpec_To_kops_KubeletConfigSpec(in *KubeletConfigSpec, out *kops.KubeletConfigSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeletConfigSpec_To_kops_KubeletConfigSpec(in, out, s)
}

func autoConvert_kops_KubeletConfigSpec_To_v1alpha1_KubeletConfigSpec(in *kops.KubeletConfigSpec, out *KubeletConfigSpec, s conversion.Scope) error {
	out.APIServers = in.APIServers
	out.LogLevel = (*int)(unsafe.Pointer(in.LogLevel))
	out.Config = in.Config
	out.HostnameOverride = in.HostnameOverride
	out.AllowPrivileged = (*bool)(unsafe.Pointer(in.AllowPrivileged))
	out.EnableDebuggingHandlers = (*bool)(unsafe.Pointer(in.EnableDebuggingHandlers))
	out.ClusterDomain = in.ClusterDomain
	out.ClusterDNS = in.ClusterDNS
	out.NetworkPluginName = in.NetworkPluginName
	out.CloudProvider = in.CloudProvider
	out.KubeletCgroups = in.KubeletCgroups
	out.RuntimeCgroups = in.RuntimeCgroups
	out.SystemCgroups = in.SystemCgroups
	out.CgroupRoot = in.CgroupRoot
	out.ConfigureCBR0 = (*bool)(unsafe.Pointer(in.ConfigureCBR0))
	out.HairpinMode = in.HairpinMode
	out.BabysitDaemons = (*bool)(unsafe.Pointer(in.BabysitDaemons))
	out.PodCIDR = in.PodCIDR
	out.ReconcileCIDR = (*bool)(unsafe.Pointer(in.ReconcileCIDR))
	out.RegisterSchedulable = (*bool)(unsafe.Pointer(in.RegisterSchedulable))
	out.NodeLabels = *(*map[string]string)(unsafe.Pointer(&in.NodeLabels))
	out.NonMasqueradeCIDR = in.NonMasqueradeCIDR
	out.NetworkPluginMTU = (*int32)(unsafe.Pointer(in.NetworkPluginMTU))
	return nil
}

func Convert_kops_KubeletConfigSpec_To_v1alpha1_KubeletConfigSpec(in *kops.KubeletConfigSpec, out *KubeletConfigSpec, s conversion.Scope) error {
	return autoConvert_kops_KubeletConfigSpec_To_v1alpha1_KubeletConfigSpec(in, out, s)
}

func autoConvert_v1alpha1_KubenetNetworkingSpec_To_kops_KubenetNetworkingSpec(in *KubenetNetworkingSpec, out *kops.KubenetNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_KubenetNetworkingSpec_To_kops_KubenetNetworkingSpec(in *KubenetNetworkingSpec, out *kops.KubenetNetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubenetNetworkingSpec_To_kops_KubenetNetworkingSpec(in, out, s)
}

func autoConvert_kops_KubenetNetworkingSpec_To_v1alpha1_KubenetNetworkingSpec(in *kops.KubenetNetworkingSpec, out *KubenetNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_KubenetNetworkingSpec_To_v1alpha1_KubenetNetworkingSpec(in *kops.KubenetNetworkingSpec, out *KubenetNetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_KubenetNetworkingSpec_To_v1alpha1_KubenetNetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_LeaderElectionConfiguration_To_kops_LeaderElectionConfiguration(in *LeaderElectionConfiguration, out *kops.LeaderElectionConfiguration, s conversion.Scope) error {
	out.LeaderElect = (*bool)(unsafe.Pointer(in.LeaderElect))
	return nil
}

func Convert_v1alpha1_LeaderElectionConfiguration_To_kops_LeaderElectionConfiguration(in *LeaderElectionConfiguration, out *kops.LeaderElectionConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_LeaderElectionConfiguration_To_kops_LeaderElectionConfiguration(in, out, s)
}

func autoConvert_kops_LeaderElectionConfiguration_To_v1alpha1_LeaderElectionConfiguration(in *kops.LeaderElectionConfiguration, out *LeaderElectionConfiguration, s conversion.Scope) error {
	out.LeaderElect = (*bool)(unsafe.Pointer(in.LeaderElect))
	return nil
}

func Convert_kops_LeaderElectionConfiguration_To_v1alpha1_LeaderElectionConfiguration(in *kops.LeaderElectionConfiguration, out *LeaderElectionConfiguration, s conversion.Scope) error {
	return autoConvert_kops_LeaderElectionConfiguration_To_v1alpha1_LeaderElectionConfiguration(in, out, s)
}

func autoConvert_v1alpha1_NetworkingSpec_To_kops_NetworkingSpec(in *NetworkingSpec, out *kops.NetworkingSpec, s conversion.Scope) error {
	out.Classic = (*kops.ClassicNetworkingSpec)(unsafe.Pointer(in.Classic))
	out.Kubenet = (*kops.KubenetNetworkingSpec)(unsafe.Pointer(in.Kubenet))
	out.External = (*kops.ExternalNetworkingSpec)(unsafe.Pointer(in.External))
	out.CNI = (*kops.CNINetworkingSpec)(unsafe.Pointer(in.CNI))
	out.Kopeio = (*kops.KopeioNetworkingSpec)(unsafe.Pointer(in.Kopeio))
	out.Weave = (*kops.WeaveNetworkingSpec)(unsafe.Pointer(in.Weave))
	return nil
}

func Convert_v1alpha1_NetworkingSpec_To_kops_NetworkingSpec(in *NetworkingSpec, out *kops.NetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_NetworkingSpec_To_kops_NetworkingSpec(in, out, s)
}

func autoConvert_kops_NetworkingSpec_To_v1alpha1_NetworkingSpec(in *kops.NetworkingSpec, out *NetworkingSpec, s conversion.Scope) error {
	out.Classic = (*ClassicNetworkingSpec)(unsafe.Pointer(in.Classic))
	out.Kubenet = (*KubenetNetworkingSpec)(unsafe.Pointer(in.Kubenet))
	out.External = (*ExternalNetworkingSpec)(unsafe.Pointer(in.External))
	out.CNI = (*CNINetworkingSpec)(unsafe.Pointer(in.CNI))
	out.Kopeio = (*KopeioNetworkingSpec)(unsafe.Pointer(in.Kopeio))
	out.Weave = (*WeaveNetworkingSpec)(unsafe.Pointer(in.Weave))
	return nil
}

func Convert_kops_NetworkingSpec_To_v1alpha1_NetworkingSpec(in *kops.NetworkingSpec, out *NetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_NetworkingSpec_To_v1alpha1_NetworkingSpec(in, out, s)
}

func autoConvert_v1alpha1_WeaveNetworkingSpec_To_kops_WeaveNetworkingSpec(in *WeaveNetworkingSpec, out *kops.WeaveNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_v1alpha1_WeaveNetworkingSpec_To_kops_WeaveNetworkingSpec(in *WeaveNetworkingSpec, out *kops.WeaveNetworkingSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_WeaveNetworkingSpec_To_kops_WeaveNetworkingSpec(in, out, s)
}

func autoConvert_kops_WeaveNetworkingSpec_To_v1alpha1_WeaveNetworkingSpec(in *kops.WeaveNetworkingSpec, out *WeaveNetworkingSpec, s conversion.Scope) error {
	return nil
}

func Convert_kops_WeaveNetworkingSpec_To_v1alpha1_WeaveNetworkingSpec(in *kops.WeaveNetworkingSpec, out *WeaveNetworkingSpec, s conversion.Scope) error {
	return autoConvert_kops_WeaveNetworkingSpec_To_v1alpha1_WeaveNetworkingSpec(in, out, s)
}
