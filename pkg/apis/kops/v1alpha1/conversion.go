// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	"k8s.io/kops/pkg/apis/kops"
	"k8s.io/kubernetes/pkg/conversion"
)

func Convert_v1alpha1_BastionSpec_To_kops_BastionSpec(in *BastionSpec, out *kops.BastionSpec, s conversion.Scope) error {
	out.PublicName = in.PublicName
	out.IdleTimeout = in.IdleTimeout

	if !in.Enable {
		out.PublicName = ""
		out.IdleTimeout = 0
	}

	return nil
}

func Convert_kops_BastionSpec_To_v1alpha1_BastionSpec(in *kops.BastionSpec, out *BastionSpec, s conversion.Scope) error {
	out.PublicName = in.PublicName
	out.IdleTimeout = in.IdleTimeout

	out.Enable = true
	out.MachineType = ""

	return nil
}

func Convert_v1alpha1_ClusterSpec_To_kops_ClusterSpec(in *ClusterSpec, out *kops.ClusterSpec, s conversion.Scope) error {
	if in.Zones != nil {
		in, out := &in.Zones, &out.Subnets
		*out = make([]kops.ClusterSubnetSpec, len(*in))
		for i := range *in {
			if (*in)[i] == nil {
				continue
			}
			if err := Convert_v1alpha1_Zone_To_kops_ClusterSubnetSpec((*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Subnets = nil
	}

	// TODO: not perfect round-tripping ?
	out.SSHAccess = in.AdminAccess
	out.APIAccess = in.AdminAccess

	return autoConvert_v1alpha1_ClusterSpec_To_kops_ClusterSpec(in, out, s)
}

func Convert_kops_ClusterSpec_To_v1alpha1_ClusterSpec(in *kops.ClusterSpec, out *ClusterSpec, s conversion.Scope) error {
	if in.Subnets != nil {
		in, out := &in.Subnets, &out.Zones
		*out = make([]*ClusterZoneSpec, len(*in))
		for i := range *in {
			(*out)[i] = &ClusterZoneSpec{}
			if err := Convert_kops_ClusterSubnetSpec_To_v1alpha1_Zone(&(*in)[i], (*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Zones = nil
	}

	// TODO: not perfect round-tripping ?
	out.AdminAccess = in.SSHAccess

	return autoConvert_kops_ClusterSpec_To_v1alpha1_ClusterSpec(in, out, s)
}

func Convert_v1alpha1_Zone_To_kops_ClusterSubnetSpec(in *ClusterZoneSpec, out *kops.ClusterSubnetSpec, s conversion.Scope) error {
	out.CIDR = in.CIDR
	out.ProviderID = in.ProviderID
	out.SubnetName = in.Name
	out.Zone = in.Name
	return nil
}

func Convert_kops_ClusterSubnetSpec_To_v1alpha1_Zone(in *kops.ClusterSubnetSpec, out *ClusterZoneSpec, s conversion.Scope) error {
	out.CIDR = in.CIDR
	out.ProviderID = in.ProviderID
	out.Name = in.SubnetName

	return nil
}

func Convert_v1alpha1_EtcdMemberSpec_To_kops_EtcdMemberSpec(in *EtcdMemberSpec, out *kops.EtcdMemberSpec, s conversion.Scope) error {
	out.InstanceGroup = in.Zone

	return autoConvert_v1alpha1_EtcdMemberSpec_To_kops_EtcdMemberSpec(in, out, s)
}

func Convert_kops_EtcdMemberSpec_To_v1alpha1_EtcdMemberSpec(in *kops.EtcdMemberSpec, out *EtcdMemberSpec, s conversion.Scope) error {
	out.Zone = in.InstanceGroup

	return autoConvert_kops_EtcdMemberSpec_To_v1alpha1_EtcdMemberSpec(in, out, s)
}

func Convert_v1alpha1_InstanceGroupSpec_To_kops_InstanceGroupSpec(in *InstanceGroupSpec, out *kops.InstanceGroupSpec, s conversion.Scope) error {
	out.Subnets = in.Zones

	return autoConvert_v1alpha1_InstanceGroupSpec_To_kops_InstanceGroupSpec(in, out, s)
}

func Convert_kops_InstanceGroupSpec_To_v1alpha1_InstanceGroupSpec(in *kops.InstanceGroupSpec, out *InstanceGroupSpec, s conversion.Scope) error {
	out.Zones = in.Subnets

	return autoConvert_kops_InstanceGroupSpec_To_v1alpha1_InstanceGroupSpec(in, out, s)
}

func Convert_v1alpha1_TopologySpec_To_kops_TopologySpec(in *TopologySpec, out *kops.TopologySpec, s conversion.Scope) error {
	out.Masters = in.Masters
	out.Nodes = in.Nodes
	if in.Bastion != nil && in.Bastion.Enable {
		out.Bastion = new(kops.BastionSpec)
		if err := Convert_v1alpha1_BastionSpec_To_kops_BastionSpec(in.Bastion, out.Bastion, s); err != nil {
			return err
		}
	} else {
		out.Bastion = nil
	}
	return nil
}

func Convert_kops_TopologySpec_To_v1alpha1_TopologySpec(in *kops.TopologySpec, out *TopologySpec, s conversion.Scope) error {
	out.Masters = in.Masters
	out.Nodes = in.Nodes
	if in.Bastion != nil {
		out.Bastion = new(BastionSpec)
		if err := Convert_kops_BastionSpec_To_v1alpha1_BastionSpec(in.Bastion, out.Bastion, s); err != nil {
			return err
		}
	} else {
		out.Bastion = nil
	}
	return nil
}

