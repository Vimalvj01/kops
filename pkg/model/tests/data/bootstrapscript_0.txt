#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=nodeup-amd64-1,nodeup-amd64-2
NODEUP_HASH_AMD64=833723369ad345a88dd85d61b1e77336d56e61b864557ded71b92b6e34158e6a
NODEUP_URL_ARM64=nodeup-arm64-1,nodeup-arm64-2
NODEUP_HASH_ARM64=e525c28a65ff0ce4f95f9e730195b4e67fdcb15ceb1f36b5ad6921a8a4490c71

export AWS_REGION=eu-west-1


echo "http_proxy=http://example.com:80" >> /etc/environment
echo "https_proxy=http://example.com:80" >> /etc/environment
echo "no_proxy=" >> /etc/environment
echo "NO_PROXY=" >> /etc/environment
while read in; do export $in; done < /etc/environment
case `cat /proc/version` in
*[Dd]ebian*)
  echo "Acquire::http::Proxy \"${http_proxy}\";" > /etc/apt/apt.conf.d/30proxy ;;
*[Uu]buntu*)
  echo "Acquire::http::Proxy \"${http_proxy}\";" > /etc/apt/apt.conf.d/30proxy ;;
*[Rr]ed[Hh]at*)
  echo "proxy=${http_proxy}" >> /etc/yum.conf ;;
esac
echo "DefaultEnvironment=\"http_proxy=${http_proxy}\" \"https_proxy=${http_proxy}\" \"NO_PROXY=${no_proxy}\" \"no_proxy=${no_proxy}\"" >> /etc/systemd/system.conf
systemctl daemon-reload
systemctl daemon-reexec


sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

try-download-file() {
  local -r url="$1"
  local -r file="$2"
  local -r auth="$3"
  if [[ "$auth" == "" ]]; then
        if curl -f --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then return 0; fi
        if wget --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10 "${url}"; then return 0; fi
        if curl -f -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then return 0; fi
        if wget -O "${file}" --connect-timeout=20 --tries=6 --wait=10 "${url}"; then return 0; fi
  else
        if curl -f --compressed -Lo "${file}" -v -H "Authorization: Bearer ${auth}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then return 0; fi
        if curl -f -Lo "${file}" -v -H "Authorization: Bearer ${auth}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then return 0; fi
  fi
  return 1
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  local -r urls=( $(split-commas "$3") )

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return 0
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      local access_token=""
      if [[ "${GCE_ACCESS_TOKEN_URL:-}" != "" ]]; then
        # The token always begins with 'ya29' and continues until the next double-quote.
        # We would normally use jq to be more tolerant of format changes, 
        # but it's not available in flatcar during startup (depends on docker, which isn't up yet.)
        access_token=$(curl "$GCE_ACCESS_TOKEN_URL" -H "Metadata-Flavor: Google" | grep -Eo 'ya29\.[^\"]*')
      fi

      echo "Attempting download of ${url}"
      if ! try-download-file "${url}" "${file}" "${access_token}" ; then
        continue
      fi
      if ! validate-hash "${file}" "${hash}"; then
        echo "== Hash validation of ${url} failed. Retrying. =="
        rm -f "${file}"
      else
        echo "== Downloaded ${url} (SHA256 = ${hash}) =="
        return
      fi
    done

    echo "Download failed with all plausible commands; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

cat > conf/cluster_spec.yaml << '__EOF_CLUSTER_SPEC'
cloudConfig:
  nodeTags: something
containerRuntime: docker
containerd:
  logLevel: info
docker:
  logLevel: INFO
encryptionConfig: null
etcdClusters:
  events:
    image: gcr.io/etcd-development/etcd:v3.1.11
    version: 3.1.11
  main:
    version: 3.1.11
kubeAPIServer:
  image: CoreOS
kubeControllerManager:
  cloudProvider: aws
kubeProxy:
  cpuLimit: 30m
  cpuRequest: 30m
  featureGates:
    AdvancedAuditing: "true"
  memoryLimit: 30Mi
  memoryRequest: 30Mi
kubeScheduler:
  image: SomeImage
kubelet:
  kubeconfigPath: /etc/kubernetes/config.txt
masterKubelet:
  kubeconfigPath: /etc/kubernetes/config.cfg

__EOF_CLUSTER_SPEC

cat > conf/kube_env.yaml << '__EOF_KUBE_ENV'
CloudProvider: aws
InstanceGroupName: testIG
InstanceGroupRole: Master
NodeupConfigHash: L9npiRTZoJ1W2sV9djQigAKS/Bg1SHddDfAZQ6CQAA4=

__EOF_KUBE_ENV

download-release
echo "== nodeup node config done =="
